JavaScript 

제목 
1 수업 소개 
HTML 이 무엇인지 아신다면 이 수업부터 시작 하면 됨. 
웹이 처음 세상에 등장했을 때는 단 하나의 기술만이 존재. 
바로 HTML. 인간의 욕심은 끝이 없음. 
수많은 욕심 중에서 우리의 관심사는 바로 사용자와 
상호작용하고 싶다는 욕망. 

HTML은 정적. 
한번 화면에 출력되면 언제나 그 모습 그대로. 
반대로 데스크톱이나 모바일에서 사용되는 여러 프로그램, 

예를 들면 게임 같은 경우 사용자의 조작에 반응해서 프로그램이 움직임. 
사람들은 웹 페이지도 게임처럼 동적으로 사용자와 상호작용할 수 있게 되기를 원함. 
그래서 태어난 기술이 자바스크립트(JavaScript).
웹은 HTML을 이용해서 웹 페이지를 우선 만든 후에 그렇게 만들어진 웹 페이지를 
자바스크립트를 이용해 사용자와 상호작용할 수 있게 기능을 추가함으로써 
HTML의 정보와 자바스크립트의 기능을 모두 갖춘 전무후무하고 유일무이한 시스템으로 성장. 

예를 들어 
알고 있는 수많은 웹 사이트들이 프로그램처럼 사용자와 상호작용하면서 검색 엔진을 통해 
검색된다는 것을 웹만이 가진 독창적인 특성이라고 할 수 있습니다. 
조금 무리한 비유.
HTML이 정보라고 하는 멈춰있는 이미지를 그리는 것이라면 자바스크립트는 정보라고 하는 
이미지를 마치 영화처럼 움직이게 합니다. 이것은 마법. 

-----------------------------------------------------------------
제목 
2 수업의 목적 
수업의 최종적인 목표. 
어떤 문법을 쭉 배워나가는 수업이 아니라 어떤 하나의 기능을 구현하는 과정에서 
필요한 문법을 배우는 식으로 구성된 수업. 
실습을 중심으로 하고 문법을 익혀가는 것이 부가적으로 따라온다고 생각하면 됨. 

예)
웹 사이트를 보면 눈이 부십니다라고 가정. 
그래서, night 라는 버튼을 클릭 했을 때 웹 페이지가 다음과 같이 바뀌는 기능. 
day 버튼을 누르면 다시 원래 상태로 돌아옴. 
즉, 야간 모드와 주간 모드를 버튼을 통해 바꾸는 기능. 
바로 이것이 자바스크립트가 할 수 있는 아주 중요한 특성, 
즉 사용자와 상호작용한다는 것.
사용자가 night 버튼을 클릭 했을 때 그것에 반응해서 웹 페이지를 바꿔줌. 

웹 페이지는 한 번 화면에 출력되면 자기 자신을 바꾸는 능력이 없음. 
그것을 가능하게 해주는 것이 자바스크립트. 
웹 브라우저에서 마우스 오른쪽 버튼을 클릭하면 메뉴에 검사라는 항목이 있음. 
검사를 통해 나온 부분 중에서 Elements 라는 탭 클릭. 
엘리먼트 태그라는 뜻. 
이 웹 페이지를 구성하는 HTML 태그를 볼 수 있음. 
night 버튼을 누르면 <body> 태그가 어떻게 바뀌는지 확인. 

임시 코드 

  <h1>
            <a href="index.html">WEB</a>
        </h1>

        <input type="button" value="night" onclick="
        document.querySelector('body').style.backgroundColor = 'black';
        document.querySelector('body').style.color = 'white';
        ">
    
        <input type="button" value="day" onclick="
        document.querySelector('body').style.backgroundColor = 'white';
        document.querySelector('body').style.color = 'black';
        ">
<body> 밑에 복사해서 확인 해보기. 

day 버튼을 누르면 이렇게 변경됨. 

아직은 style 이라는 속성도 모르고, 값으로 들어가 있는 것도 모르지만 
내용을 보면 대략적으로 알 수 있음. 
이곳에 나온 코드를 사람의 말로 이해 해보기를 시도. 

개발자 도구 창 오른쪽 상단에 있는 아이콘 점 3개 클릭. -> 오른쪽으로 변경. 

night 버튼을 보면 <input> 라는 태그를 이용해 버튼을 만듦. 
태그의 속성으로 button을 지정. 그럼 버튼이 됨. 
그리고 value에 적인 night 때문에 웹 브라우저가 버튼의 이름으로 night 씀. 
day 도 마찬가지. 

onclick 속성. 
웹 브라우저의 HTML 사용 설명서에는 
onclick 이라는 속성의 값으로는 자바스크립트가 와야 함.
코드를 넣으면 사용자가 onclick 의 속성을 위치하고 있는 버튼을 클릭 했을 때 
자바스크립트 코드를 실행함. 

사용자 -> night 버튼 클릭 -> 문서(document)에서 body 태그를 선택 (querySelector('body'))
하는 코드. 
body 태그는 웹 페이지 전체를 차지하는 아주 큼직한 코드. 화면 전체 의미. 
style 속성 값으로 배경색을 black 지정. (.style.backgroundColor='black')
night 버튼을 클릭하면 위 코드가 실행되는데 그 때 body 태그가 변경됨. 

body 태그의 style 속성은 HTML의 사용 설명서에 이렇게 적힘. 
"style 속성값으로는 반드시 CSS 코드가 옴. "

CSS 도 언어, 목표는 웹 페이지를 디자인하는데 최적화.

body 태그의 style 속성에 설정된 코드는 body 태그의 배경색은 검은색, 
텍스트 컬러는 흰색으로 지정하라는 CSS.
day 버튼 클릭. 반대로.

정리.
1. 자바스크립트는 사용자와 상호작용하는 언어. 
2. HTML은 웹 브라우저 화면에 한 번 출력되면 바꿀수 없음.
자바스크립트 코드에 따라 바꿀수 있음. 
HTML을 제어하는 언어. 훨씬 더 동적으로 바꿔 줌. 
문법은 뒤에서 차근차근.

----------------------------------------------------------
제목 
3 HTML과 JS 의 만남: <script> 태그 

중요한 이야기. 
자바스크립트는 HTML 위에서 동작하는 언어. 
그렇게 시작.
HTML이라는 컴퓨터 언어에 완전히 다른 문법을 가진 자바스크립트 코드를 어떻게 
넣을지 이야기. 

새파일 ex1.html 만들기. 
HTML 기본 코드 자동 완성 ( ! 하고 엔터)
자바스크립트 코드 입력. 

우선, 웹 브라우저에게 지금부터 HTML 에 자바스크립트 코드가 시작된다는 사실을 알림. 
그때 사용하는 태그가 <script> 라는 태그. 
웹 브라우저는 <script> 태그 안의 코드를 자바스크립트 코드로 해석. 
코드 작성 후 저장. 

<script> 태그와 자바스크립트 코드 작성. 

<body>
  <script>
    document.write('hello world');
  </script>
</body>

이번에는 <h1>JavaScript</h1> 를 입력. 

<h1>JavaScript</h1>
<body>
  <script>
    document.write('hello world');
  </script>

그런데 이처럼 <h1> 태그 안에 "hello world"라고 쓰는 것과 무슨 차이가 있는지 
당연히 궁금함. 
차이점. 
HTML에서 1+1 쓰면 그대로 나오고, 
자바스크립트는 동적. 계산됨. 

<body>
  <h1>JavaScript</h1>
  <script>
    document.write(1+1);
  </script>
  <h1>html</h1>
  1+1
</body>

자바스크립트는 계산해서 출력. 
HTML 은 정적. 

document.write(1+1); 는 자바스크립트 코드라는 것.
웹 페이지에 어떤 글자를 출력할 때 사용한다는 것. 
문법적으로는 아직 알 필요 없고, 이해하고 넘어가기. 

자바스크립트 코드를 웹 브라우저에게 알려 줄 때, 
<script> 태그 사용한다는 정도만. 기억. 
------------------------------------------------------------------------ 
제목
4 HTML 과 JS의 만남: 이벤트 

이벤트
:자바스크립트가 사용자와 상호작용하는데 핵심적인 역할. 

새파일 ex2.html 
버튼 만들기.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
</head>
<body>
  <input type="button" value="hi">
</body>
</html>

태그는 <input> 태그입니다. 
태그의 type 을 "button"으로 지정하면 버튼 모양. 
버튼에 글자를 넣고 싶으면 value 라는 속성을 이용. 
값은 hi 로 했음. 

hi 버튼을 클릭 했을 때, 경고창이 나타나게 하는 것. 
경고창은 alert 라는 기능인데, 
검색 : JavaScript alert 

내용 참고. 

onclick 추가하고, onclick="alert('hi')" 라고 지정. 
클릭 시, 결과 확인. 

<input> 태그에 onclick 이라는 속성을 썼는데, 특별한 속성.
HTML에 설명서에 onclick 속성의 값은 웹 브라우저가 기억해 뒀다가, 
onclick 속성이 위치하고 있는 태그를 사용자가 클릭 했을 때 
자바스크립트 코드를 자바스크립트 문법에 따라 해석해서 웹 브라우저가 실행할 것임. 

이처럼 웹 브라우저에서 일어나는 일들을 사건, 영어로는 이벤트(event)라고함. 
어떤 이벤트가 일어났을 때 어떠한 자바스크립트 코드를 실행하게 하는 것이 onclick 이라는 것 
많은 이벤트 중 , 간단한 예 
뭔가 클릭했다거나, 혹은 <input type="text"> 라고 지정하면 글자를 입력 할수 있음. 

글자를 입력할 수 있는 텍스트 상자 만들기. 

<body>
  <input type="button" value="hi" onclick="alert('hi')">
  <input type="text">
</body>

이 때 글자를 입력하면 내용이 변화하는데, 내용이 변했을 때를 체크하는 이벤트도 있음. 
그 때 사용하는 이벤트는 에디터에서 onc 까지 입력하면 다음처럼 추천. 애써 기억 할 필요 없음. 
목록 중에서 onchange 라는 속성. 

<body>
  <input type="button" value="hi" onclick="alert('hi')">
  <input type="text" onchange="alert('changed')">
</body>

결과 확인. 
입력 창에, 글자를 입력하고 엔터를 누르면 창이 뜸. 
변경이 있을 때만,
변경이 없을 때 엔터 하면 하면 창이 안뜸. 

만약, 사용자가 어떤 키를 눌렀을 때 이벤트가 발생하도록 만들고 싶다면 
다음과 같이 
검색 :'JavaScript keydown event attribute'

예제코드 
<body>
  <input type="button" value="hi" onclick="alert('hi')">
  <input type="text" onchange="alert('changed')">
  <input type="text" onkeydown="alert('key down')">
</body>

실행 결과 
입력 할 때마다 창이 뜸. 

수업의 주인공은 on 으로 시작하는 속성. 
자바스크립트에서 이벤트라고 함. 
이것들을 이용해 사용자와 상호작용할 수 있는 코드를 작성.
메인 예제로 돌아와 night , day 가 어떻게 작용하는지 일부분 알게 됨. 
즉, input 태그 속성에 onclick 속성이 들어 있고, 
아직 100% 이해하지는 못하지만 속성 값으로 자바스크립트 코드가 들어 있고 
덕분에 실행되는 것을 알수 있음. 
------------------------------------------------------------------------ 
제목 
5 HTML과 JS의 만남: 
콘솔 

자바스크립트를 실행하는 다른 방법 : 콘솔 

앞에는 웹 페이지 , 즉 파일을 만들었음. 
파일이 아니더라도 간단하게 어떤 코드를 실행해야 하는 상황에 콘솔 사용. 

웹 페이지 -> 우클릭 검사 클릭 -> Console 탭 클릭.

간혹, 계산기로도 사용 가능. 
데이터를 간단하게 처리해야 하는 경우 사용. 
콘솔창에 간단한 텍스트 복사 해보기. 

이 텍스트가 몇 개의 글자로 이뤄져 있는지 알려면? 세기 어려우니.
문자들을 작은 따옴표로 묶기 -> 그러면 문자가 됨. 
안에 있는 문자의 개수를 알려주는 명령어 .length 
이를 alert으로 감싸기. 

예)
alert('Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language such as HTML.[1] CSS is a cornerstone technology of the World Wide Web, alongside HTML andJavaScript.[2] CSS is designed to enable the separation of presentation and content, including layout, colors, and fonts.[3] This separation can improve content accessibility; provide more flexibility and control in the specification of presentation characteristics; enable multiple web pages to share formatting by specifying the relevant CSS in a separate .css file, which reduces complexity and repetition in the structural content'.length);
주의사항,
글자 잘 붙여서 넣기. 

콘솔을 이용하면 자바스크립트 코드를 즉석에서 실행 가능. 
이 콘솔에서 실행하는 자바스크립트 코드는 지금 우리가 보고 있는 웹 페이지 안에 삽입돼 있는 
자바스크립트 인 것처럼 동작함. 
다시 말해, 콘솔에서 실행하는 자바스크립트 코드는 이 웹 피이지를 대상으로 실행된다는 것.

다음처럼 가능. 
예)
생활코딩 이라는 그룹의 화면 
많은 참여자 중에 몇분 만 랜덤하게 선택 하는 예 

책 참고. 
결론, 이미 만들어진 웹 사이트를 대상으로 나의 필요에 따라 
맥락적으로 간단하면서도 나에게 딱 맞는 코드를 만들어 어떤 문제를 해결 가능. 

------------------------------------------------------------------------ 
제목 
6 데이터 타입 - 문자열과 숫자 
컴퓨터 프로그래밍에서 데이터를 처리하는 것이 매우 중요. 
어떤 형태의 데이터가 있는지 , 그 중 대표적인 문자와 숫자라는 데이터 타입 살펴보기. 
데이터 타입을 한국어로는 자료형이라고 부름. 
검색 : JavaScript data type 
그 중 모질라 재단. 
https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures

6개 데이터 타입이 있고, 객체가 있음.
내용 전체를 알 필요는 없음. 
숫자(Number)와 문자열(String) 이라고 하는 비교적 익숙한 데이터 타입이 무엇인가를 파악해보고,
각 데이터 타입의 성격을 살펴보기. 
검사 -> 콘솔 탭 선택. 
이곳에서 숫자 표현 하기. 
alert(1) 
alert(1+1) 
alert 귀찮으니 그냥 숫자로 

숫자 데이터 타입에서 중요한 것은 연산. 
사칙연산 간단히 또는 패스. 

문자열은 따옴표("")로 이루어짐. 작은 따옴표 무방. 
주의, 시작이 큰 따옴표이면 끝도 큰 따옴표. 

문자열의 기능들 살펴보기. 
검색 : JavaScript String
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String

왼쪽에 String.length 가 보임. 
확인 하면 문자열에 length만 붙이면 됨. 

이러한 length와 같은 것들을 프로퍼티(properties)라고함.
그 밖에 여러 메서드가 있는데, 몇가지 살펴보고 넘어가기. 

1) .toUpperCase() 
대문자로 출력된. 
'Hello World'.toUpperCase()

test.jpg, test2.mov
0123 4 567
2) .indexOf()
찾고자 하는 값을 넣으라고 되어 있음. 
'Hello World'.indexOf('O')
-1
없다.

'Hello World'.indexOf('o')
4
맨 앞에 있는 H 부터 0으로 쳐서 4번 째자리에 소문자 o 가 나온다는 뜻.

'Hello World'.indexOf('World')
6
공백 포함해서 6번째에 문자열이 시작.


3) .trim()
'        hello       '.trim()
'hello'
공백 없애고 출력. 

차근차근 익숙해지기. 
1 은 숫자. 
"1" 은 문자열. 
1+1 -> 2
"1" + "1" -> "11" 
항상 데이터 타입을 정확하게 표현하는 것에 대해 관심을 가질 필요가 있음. 

------------------------------------------------------------------------ 
제목 
7 변수와 대입 연산자. 

콘솔로 실습. 
변수 -> 바뀔 수 있는 값. 
하나씩 입력 하기.
x = 1;

y = 1;
x +y ;
x= 1000;
x+y;

x : 변수(variable).
= : 대입 연산자. 
오른쪽 항에 있는 값을 왼쪽에 있는 변수에 대입하는 역할을 함. 
다른 특징 
좌항과 우항을 결합해서 우항의 값을 만들어 냄. 
x=1;
x+=1;
->2 

1=2; -> 에러남
대입 연산자를 통해 값이 바뀔 수 있다는 뜻에서 변수. 
1은 언제나 1이기 때문에 바뀌지 않는다는 점에서 상수(constant)

변수를 왜 쓰는지? -> www.naver.com -> 공인아이피가 있음. 
전화번호 -> 엄마 -> 010-12345678
이유는 너무 많지만, 하나만 콕 집어 설명하기 어려움. 
수학은 변수가 없다면 공식이란 것을 사용 못함. 

변수의 위력을 느낄 수 있는 불완전한 예제 소개. 

아무 의미 없는 문자열 

" abcd egoing abcd egoing abcd egoing"
항상 극단적인 생각해야 함. 
'egoing'이 3개가 아닌 1억개가 있다고 가정. 
이 글 안에 있는 'egoing' -> 'leezche' 로 바꿔야 한다면?
힘들다. 
그래서, name 이라는 변수 사용. 

var name = 'egoing';
" abcd egoing abcd egoing abcd egoing"
->
" abcd  " + name +  " abcd  " + name +  " abcd  " + name 
바뀔수 있는 부분을 변수로 만든다. 

변수의 좋은 점 중 하나. 

대입연산자 = 
이 대입 연산자를 통해 'black' 이 backgroundColor라는, 
변수의 값이 된 것임. 

------------------------------------------------------------------------ 
제목
8 웹 브라우저 제어 

웹 브라우저 제어 
night 버튼을 눌렀을 때 배경색을 검은색으로 바꾸고, 글씨색은 흰색으로 바꾸기. 

body 태그가 페이지 전체를 감싸는 태그. 
body 태그에 style 속성을 쓰고, style 속성의 값으로 
CSS 라는 HTML 과 자바스크립트와는 완전히 다른 언어가 들어오도록 약속돼 있음. 
이 언어의 역할은 디자인. 
style 속성의 값을 다음 처럼 지정하면 배경이 검은색 되고, 글자색은 흰색으로 변경. 

<body style="backgroundColor: black; color: white;">

night 버튼을 클릭시 이 웹 페이지에 있는 body 태그의 스타일 속성을 바꿀 수 있다면 
우리가 하고자 하는 일을 할수 있음. 
HTML 코드를 수정하면 위와 같은 결과를 내지만, 항상 이런 디자인 됨. 
한번 표시되면 자신을 바꿀 수 없음. 정적.
하지만, 자바스크립트 동적. 
night 버튼을 누르면 태그가 바뀜. 
------------------------------------------------------------------------------
제목 
9 css 기초 : style 속성. 
다시 복습 하실 분 다시 보기. 아니면 다음 단계로

3.html 복사 -> ex3.html 만들기 

특정 태그를 CSS 언어로 디자인하고 싶다면, style 이라는 속성을 쓰고 
그 안에 CSS 의 속성이라는 문법을 사용하면 됨. 

예)
<h2 style="background-color: coral; color: powderblue;">JavaScript</h2>

------------------------------------------------------------------------------
제목 
10 css 기초 : style 태그. 

선택자. 
어떤 기능이나 의미가 없는 태그. -> <div> 줄바꿈 있고,
<span> 줄바꿈 없음. 

해당 태그에 클래스를 적용 하면, 중복 제거 및 한번에 많은 작업 가능. 
 <style>
    .js {
      font-weight: bold;
      color: red;
    }
  </style>
<body>
<span class="js">JavaScript</span>
</body>

------------------------------------------------------------------------------
제목 
11 css 기초 : 선택자. 
웹 페이지를 구성하는 여러 요소에 효과를 효율적으로 줄 수 있음. 
우선 순위 : 아이디 > 클래스 > 선택자. 

  <style>
    #first {
      color: green;
    }

    span {
      color: blue;
    }

    .js {
      font-weight: bold;
      color: red;
    }
  </style>
</head>
<body>
  <span id="first" class="js">JavaScript</span>

------------------------------------------------------------------------------
제목 
12 제어할 태그 선택하기. 

자바스크립트, css , HTML 잘 조화시키기. 

night 버튼 만들고, 속성 값 주기. 

ex3.html -> night 버튼과 day 버튼 만들기. 

이벤트 추가. onclick 속성 추가. 

검색 엔진 : JavaScript select tag by css selector 
https://developer.mozilla.org/ko/docs/Web/API/Document/querySelector

검색 엔진 : JavaScript element style 
https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style


검색 엔진 : JavaScript style background-color 
https://www.w3schools.com/jsref/prop_style_backgroundcolor.asp

차례로 복사 후 확인.
주의 사항 속성 추가 후 , onclick 큰 따옴표로 닫고, 세미콜론 표시하고, 닫는 태그 확인.

        <input type="button" value="night" onclick="
        document.querySelector('body').style.backgroundColor = 'black';
배경만 변경.        
        document.querySelector('body').style.color = 'white';
텍스트 색 변경.        
        ">
    
        <input type="button" value="day" onclick="
        document.querySelector('body').style.backgroundColor = 'white';
        document.querySelector('body').style.color = 'black';
        ">
자바스크립트로 할수 있는 가장 중요한 일은 사용자와 상호작용해서 
HTML 과 CSS를 프로그래밍적으로 동적으로 변경. 
좀 더 단순하게 만드는 테크닉 살펴보기
------------------------------------------------------------------
제목 13
프로그램, 프로그래밍 , 프로그래머 

이론적. 보편적인 의미. 
HTML 과 자바스크립트는 둘다 컴퓨터 언어입니다. 
자바스크립트 컴퓨터 언어 또는 컴퓨터 프로그래밍 언어라고 하지만, 
HTML 은 컴퓨터 프로그래밍 언어라고 하지 않습니다. 
프로그램이라는 말의 의미. 
프로그램 어원 -> 음악회 같은 경우 시간의 흐름에 따라 음악이 연주되는 순서. 이 순서.
단어의 중심에는 순서라는 의미. 
이 순서를 만드는 행위를 프로그래밍. 만드는 사람 프로그래머.
프로그램, 프로그래밍, 프로그래머란 말은 소프트웨어뿐만 아니라 아주 많은 분야에서 사용되는 말. 

컴퓨터로 와서 어떤 일 할 때 그 기능 중 하나만 필요한 경우는 거의 없음. 
어떤 의도에 따라 순서대로 여러 기능을 작동 시키는 것이 일반적인 컴퓨터 사용 방법. 
시간 순서에 따라 실행돼야 할 기능을 프로그래밍 언어의 문법에 맞게 글로 적어두는 방식을 고안. 
이것을 컴퓨터에게 시킴. 프로그램의 본질이라 생각됨. 

HTML 시간 순서에 따라 무엇을 할 필요가 없음. 
하지만, 자바스크립트는 사용자와 상호작용 하기위해 고안됨. 
시간 순서에 따라 웹 브라우저의 여러 기능이 실행돼야 하기 때문에. 

사람 욕심 많음. 
처음에 단순히 시간을 나열 -> 조건에 따라 다른 순서에 기능 실행 
-> 반복해서 기능 실행 
욕심을 충족하기 위해 성취한 위대한 업적들을 따라가며 컴퓨터 프로그래밍 언어라면 
어떤 언어든 가리지 않고 가지고 있는 핵심적인 기능들인 
조건문, 반복문, 함수 등을 살펴보기.

------------------------------------------------------------------------ 
제목
14 조건문 예고

중요함. 
조건에 따라 순서의 기능들이 실행되게 하는 것.
프로그래밍이란 것을 통해 반복적인 일을 하지 않게 됐다면 조건문이라는 것은 단순한 
반복문이 아니라 아주 복잡한 업무에서도 우리가 해방되게 하는 아주 혁명적인 도구. 

night , day 버튼 2개 불만족으로 가정. 

야간 모드에서 버튼을 클릭 하면 주간 모드가 되고, 
주간 모드에서 버튼을 클릭 하면 야간 모드가 되는 기능. 
이것을 토글(toggle)이라 함. 

구현해보기. 

중요한 부분은 if 라는 조건문 

예제 코드 

      <input id="night_day" type="button" value="night" onclick="
      if(document.querySelector('#night_day').value === 'night') {
          document.querySelector('body').style.backgroundColor = 'black';
        document.querySelector('body').style.color= 'white';
        document.querySelector('#night_day').value = 'day';   
      } else {
        document.querySelector('body').style.backgroundColor = 'white';
        document.querySelector('body').style.color= 'black';
        document.querySelector('#night_day').value = 'night';   
      }
      ">
if라는 조건문에 따라 현재 모드가 주간 모드라면 
if 의 코드가 실행되고 주간 모드가 아니라면 else 의 코드가 실행됨. 
조건문과 함께 === 라는 비교 연산자도 살펴보기. 

비교 연산자를 통해 만들어진 불리언(boolean) 이라는 것도 보기. 

프로그래밍을 경험한 적이 있고, 조건문, 비교 연산자, 불리언이라는 주제를 알면 
문법 챕터 넘기고, 기능을 이용해 최종적으로 토글 기능을 구현하는 부분으로 패스. 
아니면 차근차근 보기. 

------------------------------------------------------------------------ 
제목
15 비교 연산자와 불리언 

비교 연산자, 불리언 이라는 새로운 데이터 타입, 조건문. 
연관성이 높은 주제. 

실습 위해 ex4.html 파일 만들기. 

<!DOCTYPE html>
<html lang="en">
<head>
  <title></title>
</head>
<body>
  <h1>Comparison operators & Boolean</h1>
</body>
</html>

먼저, === 비교연산자.

  <h1>Comparison operators & Boolean</h1>
  <h2>===</h2>
  <script>
    document.write(1===1);
  </script>

  <h3>1===2</h3>
  <script>
    document.write(1===2);
  </script>

true, false
좌항과 우항의 관계에 따라 true 또는 false 중 하나의 값을 만들어내는 연산자.
두 가지 값을 묶어서 불리언(boolean) 부름. 

이번에는 1<2 
HTML 에서는 <가 태그를 시작하는 문법이기 때문에 <를 출력하고자 할 때는 
'less than' 이라는 뜻에서 &lt; 라고 씀. 

html 엔티티 참고블로그
https://miaow-miaow.tistory.com/56

<!DOCTYPE html>
<html lang="en">
<head>
  <title></title>
</head>
<body>
  <h1>Comparison operators & Boolean</h1>
  <h2>===</h2>
  <script>
    document.write(1===1);
  </script>

  <h3>1===2</h3>
  <script>
    document.write(1===2);
  </script>
  
  <h3>1&lt;2</h3>
  <script>
    document.write(1<2);
  </script>
  <h3>1&lt;1</h3>
  <script>
    document.write(1<2);
  </script>
</body>
</html>

------------------------------------------------------------------------ 
제목
16 조건문 

불리언과 비교연산자를 어디에 쓰나?

새파일 -> ex5.html 

<h1>Conditional statements</h1>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title></title>
</head>
<body>
  <h1>Conditional statements</h1>
  <script>
    
  </script>
</body>
</html>

단순한 코드 1,2,3,4 출력하는 코드 추가. 

<h1>Conditional statements</h1>
  <script>
    document.write("1<br>");
    document.write("2<br>");
    document.write("3<br>");
    document.write("4<br>");
  </script>

프로그램의 이름 추가. 

<h1>Conditional statements</h1>
  <h2>Program</h2>
  <script>
    document.write("1<br>");
    document.write("2<br>");
    document.write("3<br>");
    document.write("4<br>");
  </script>

if 문 사용. 

if - else 문 

추가 코드 .
 <h2>IF-true</h2>
  <script>
    document.write("1<br>");
    if(true) {
      document.write("2<br>");
    } else {
      document.write("3<br>");
    }
    document.write("4<br>");
  </script>

결과화면 3 안보임. 

true -> false 변경.

 <h2>IF-true</h2>
  <script>
    document.write("1<br>");
    if(false) {
      document.write("2<br>");
    } else {
      document.write("3<br>");
    }
    document.write("4<br>");
  </script>


실행결과
2가 안보임.

if 조건문에 불리언 타입이 오는데 , 
true, false 에 따라 결과가 다름. 

사실 예제를 위한 것이라, 쓸모 없는 코드. 

예제에 조건문이용 해보기. 

------------------------------------------------------------------------ 
제목
17 조건문 활용

night 버튼, day 버튼 하나로 만들기. 

ex3.html

앞에 코드 참고. 간단히 보고 넘어감. 

예제 코드 

      <input id="night_day" type="button" value="night" onclick="
      if(document.querySelector('#night_day').value === 'night') {
          document.querySelector('body').style.backgroundColor = 'black';
        document.querySelector('body').style.color= 'white';
        document.querySelector('#night_day').value = 'day';   
      } else {
        document.querySelector('body').style.backgroundColor = 'white';
        document.querySelector('body').style.color= 'black';
        document.querySelector('#night_day').value = 'night';   
      }
      ">
코드 각각 설명 해주기. 

----------------------------------------------------------
제목 
18 중복의 제거를 위한 리팩터링 
리팩터링
: 단어에서 팩터리는 공장이며, 리는 다시라는 뜻이므로 
공장으로 다시 보내 개선한다는 정도. 

코딩을 하고 나면 비효율적인 면이 생기기 마련. 
동작은 그대로 두고, 코드 자체를 효율적으로 만들어서 
가독성을 높이고, 유지보수를 편리하게 만들고, 중복된 코드를 줄이는 방향으로 
개선하는 작업.
소프트웨어의 규모가 커지고 복잡해지면 틈틈이 리팩터링을 해야 
좋은 프로그램을 만들수 있다. 
앞서 만든 코드를 리팩터링 하기. 

ex3.html 

예제 코드 

      <input id="night_day" type="button" value="night" onclick="
      if(document.querySelector('#night_day').value === 'night') {
          document.querySelector('body').style.backgroundColor = 'black';
        document.querySelector('body').style.color= 'white';
        document.querySelector('#night_day').value = 'day';   
      } else {
        document.querySelector('body').style.backgroundColor = 'white';
        document.querySelector('body').style.color= 'black';
        document.querySelector('#night_day').value = 'night';   
      }
      ">

만약 night 버튼의 기능을 페이지 하단에서도 보이게 하고 싶을 수 있음. 
본문 하단에 다음 코드를 붙여넣기. 

프로그램이 제대로 작동하지 않음. 
야간 모드와 주간 모드로 바뀌기는 하지만 night 버튼이 day 버튼으로 변경되지 않음. 
즉, 하단을 클릭 하면 상단만 변경됨. 
하단 코드에서 버튼 id 값을 night_day -> night_day2 로 변경 후 
동작을 확인하면 정상 동작. 

그런데 같은 원리로 1억 개의 버튼을 만든다면 1억 개를 모두 바꿔야 하는 불편함을 
겪게 될수 있음. 
때문에 onclick과 같은 이벤트 안에서 실행되는 코드에서는 현재 코드가 속해 있는 태그를 
가리키도록 약속돼 있는 특수한 키워드를 사용. 
바로 this 키워드.

하단 코드에서 
document.querySelector('#night_day2')는 사실 자기 자신을 가리킴.
이 코드 대신 this 로 변경. 
this로 바꾸면 night_day2의 id 값이 더는 필요 없음. 
3개 변경. 

 <input type="button" value="night" onclick="
    if(this.value === 'night') {
        document.querySelector('body').style.backgroundColor = 'black';
      document.querySelector('body').style.color= 'white';
      this.value = 'day';   
    } else {
      document.querySelector('body').style.backgroundColor = 'white';
      document.querySelector('body').style.color= 'black';
      this.value = 'night';   
    }
변경. 
정상 동작 함. 
훨씬 간결. 이 코드를 복사해서 버튼을 새로 만들어보면 새로운 버튼도 잘 동작함. 
바로 this 키워드의 효과. 위쪽에 있는 코드도 동일하게 만들면 
프로그램을 좀 더 유지보수하기 편리. 

코딩을 잘 하는 방법 -> 중복을 끝까지 쫓아가 다 없애는 방법. 
코딩을 하다 보면 여러 가지 기술을 쓰게 되는데, 여러 가지 기술이 출현하게 된 
결정적인 계기가 바로 중복의 제거와 관련됐을 가능성이 큼. 

이번에는 중복된 코드를 제거 해보기. 

<body> 태그를 target 변수에 할당. target 변수 사용.

var target = document.querySelector('body');
	
<input
            type="button"
            value="night"
            onclick="
        if(this.value === 'night') {
            var target = document.querySelector('body');
            target.style.backgroundColor = 'black';
            target.style.color= 'white';
            this.value = 'day';
        } else {
		var target = document.querySelector('body');
            target.style.backgroundColor = 'white';
            target.style.color= 'black';
            this.value = 'night';
        }
        ">
target 변수를 쓰는 부분들은 상단에 작성한 
var target = document.querySelector('body'); 만 바꾸면 
target 변수를 쓰는 모든 코드가 한 번에 바뀌는 폭발적인 효과를 갖게 됨. 
변수라는 것을 활용하면 코드를 작성할 때 큰 도움을 받을 수 있다는 것을 기억. 

조건문을 어디에 쓰는지 조건문의 실용적 사례를 살펴봄. 
------------------------------------------------------------
제목 
19 반복문 예고 
자바스크립트의 새로운 문법을 살펴보기 위해 기존 예제에서 불만족스러운 부분 찾아보기. 
우선, night 버튼을 누르면 링크들이 너무 어두움. 
반면 밝은 색으로 바뀌었을 때는 링크가 선명함. 
즉, 버튼을 누를 때마다 어두운 경우는 조금 밝게, 밝은 경우에는 조금 어두운 색으로 링크가 
표현 되면 좋겠음. 
버튼을 클릭시 웹 페이지에 있는 모든 링크에 대해 
style 속성의 값을 조절해서 밝게 바꾸도록 코드를 작성해도 되겠지만, 
링크가 1억 개라면 1억 번의 반복적인 작업을 해야 함. 
그럼, 코드의 양이 늘고, 유지보수하기 힘듦. 

이 상황을 구원해주는 기능이 바로 반복문. 
개요. 개발자 도구로 <a> 태그 보기. 

night 버튼 클릭하면 <a> 태그에 style 속성이 추가되며  
'powderblue' 라는 색상이 적용됨. 
day 버튼을 클릭하면  'blue' 색상이 적용됨. 
이렇게 하기 위한 코드가 바로 다음 코드. 
대략적인 내용은 
이 웹 페이지의 모든 <a> 태그를 가져오고,
<a> 태그 하나하나에 대해 반복적으로 powderblue 색상을 지정하는 것. 
 <script>
        var alist = document.querySelectorAll('a');
        var i = 0;
        while ( i < alist.length) {
            alist[i].style.color = 'powderblue';
            console.log(alist[i]);
            i = i + 1 ;
        }
    </script>

이 코드를 이해하기 위해 필요한 부품들은 다음 시간에 
먼저 배열, 배열을 이용해 반복적인 작업을 처리 하기 위한 반복문 보기. 
------------------------------------------------------
제목 
20 배열 

배열이 왜 필요한가? 
반복문에서 배열이 왜 필요한지는 이해하기 쉬움. 
데이터 중에서 서로 연관된 데이터를 잘 정리 정돈해서 담아두는 일종의 수납 상자를 
배열(array)이라고 생각하면 됨. 
배열 문법 및 성격들 보기. 

새파일 
ex6.html 만들기. 
<h1> Array </h1>
맨 먼저 배열을 만드는 방법을 알아봄. 
다음으로 <h2>태그에 Syntax
<h2>Syntax</h2>
즉 문법이란 텍스트를 담겠습니다. 
그런데 문자열은 어떤 기호로 시작해서 어떤 기호로 끝나나요?
따옴표로 시작해서 따옴표로 끝나게 됩니다. 
배열은 대괄호로 시작해서 대괄호로 끝납니다. 
그리고 대괄호 안에 값들을 적는데, 여러 개의 값을 적을 수 있음. 

예제 
["egoing", "leezche"];

coworkers 라는 변수에 배열이라는 새로운 데이터 타입이 담긴 것. 
이 데이터 타입에 coworkers 라는 이름을 붙인 것이라고 할수 있음. 
변수를 쓴다는 말. 

코드 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Document</title>
</head>
<body>
  <h1> Array </h1>
  <h2>Syntax</h2>
  <script>
    var coworkers = ["egoing", "leezche"];
  </script>
</body>
</html>

p407 

새로운 수납상자를 갖다 넣으면서 그 안에 물건을 두 개 넣은 것과 같음. 
배열 만들기 했으니, 
배열에 들어 있는 항목을 가져오는 방법 보기. 
배열의 첫번째로 들어가 있는 데이터를 꺼내고 싶을 경우 
인덱스 index -> i -> 시작이 0 으로 시작. 
coworkers[0] 이라고 쓰면 -> egoing 나옴. 

  <h1> Array </h1>
  <h2>Syntax</h2>
  <script>
    var coworkers = ["egoing", "leezche"];
  </script>
  <h2>get</h2>
  <script>
    document.write(coworkers[0]);
    document.write(coworkers[1]);
  </script>

첫 번째 자리에 있는 값은 0번째라는 뜻. 
이를 인덱스(index)라고 함. 
인덱스 0번 egoing
인덱스 1번 leezche 데이터를 가리킴. 

앞에서 배열 만들고, 값을 넣고, 값을 가져오는 방법을 살펴봄.
또, 중요한 부분 배열에 들어있는 값이 몇 개인가를 체크. 

검색:javascript array count 

https://www.w3schools.com/jsref/jsref_length_array.asp

배열에 length를 지정하면 배열 안에 몇개의 값이 있는지 알려줌. 

  <h2>count</h2>
  <script>
    document.write(coworkers.length);
  </script>

항목의 개수가 2가 출력됨. 

인덱스는 0부터 세고, 
개수를 셀때는 1부터 세기 때문에 값이 2개라면,
length 값은 2가 됨. 
length를 체크하기 전에 데이터를 추가하는 방법도 살펴봄. 
데이터를 추가하고 싶을 때도 검색을 통해 데이터를 추가하는 방법을 알아봄. 

검색: javascript array add data
https://www.w3schools.com/jsref/jsref_push.asp

보면 push()라는 키워드가 보임. 
push()를 통해 배열에 데이터가 추가되는 것을 알수 있음. 

<h2>add</h2>
  <script>
    coworkers.push('duru');
    coworkers.push('taeho');
  </script>

  <h2>count</h2>
  <script>
    document.write(coworkers.length);
  </script>

배열에 'duru', 'taeho' 새로 추가되어 
coworkers.length 의 값은 : 4가 출력. 

배열에는 push() 등과 같은 여러 가지 명령어가 있음. 
push()는 배열의 끝에 데이터를 추가하는 역할. 
만약 데이터를 앞쪽에 추가하고 싶다면 어떻게 해야 할까?
중간에 넣고 싶으면? 처음부터 외울 필요 없음. 
검색 하면 됨. 
검색: javascript array
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array

많은 기능이 있음. 지금은 눈으로 만 보고 넘어감. 

---------------------------------------------------------
제목 
21 반복문 

반복문(루프라고도 함.)에 대해 살펴봄. 

새파일 만들기.
ex7.html 
<script> 태그 안에 코드를 넣어 보자. 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Document</title>
</head>
<body>
  <h1>Loop</h1>
  <ul>
    <script>
      document.write('<li>1</li>');
      document.write('<li>2</li>');
      document.write('<li>3</li>');
      document.write('<li>4</li>');
    </script>
  </ul>
</body>
</html>

위에서부터 아래로 순서대로 코드를 실행하는 것이 
프로그램의 기본적인 실행 순서. 
필요에 따라서는 2번째와 3번째로 실행돼야 하는 명령을 
여러 번 반복해야 할 경우가 있음. 
기본적인 방법은 반복적으로 코드를 복사해서 붙여넣는 식 작성. 
이러면 문제.
반복해야 할 개수가 1억 개라면 불가능. 
버그가 있어 수정해야 할 경우 1억 개를 전부 바꿔야 하는 
극단적인 상황임. 
이러한 상황이면 반복문을 배우는 어려움쯤은 감수 할수 있음. 
이제 반복문의 필요성을 느끼고 배워보자. 

2,3번째 코드 3번 반복해 보기.
반복문의 기본 문법. 

while 이라는 것이 반복문의 키워드. 
그 밖에 for도 있음. 

while 괄호 안에는 불리언 데이터 타입이 들어옴. 
true, false 중에서 
while 괄호 안의 내용이 true 인 동안에는 while 문 안의 코드가 
반복적으로 실행. 
언제까지 실행? while 괄호 안의 내용이 false가 될 때까지.

순서 
while 문 실행 -> true/false 상태 봄 -> true 면 중괄호 안에 있는 
코드를 한 줄씩 실행하고 마지막까지 가면 다시 while 조건의 값이 
true , false 인지 확인. -> true 이면 위에 반복 ->
false 라면 while 문 바깥쪽에 있는 코드 실행.
즉, 반복문이라는 것은 순서대로 실행되는 프로그램의 흐름을 제어하는 
제어문이라고 할 수 있습니다. if 문과 함께.

while(true)로 결과를 확인하면 웹 브라우저가 컴퓨터의 자원을 다 가져감. 
왜? 무한히 반복되므로. 
그래서 항상 반복문이 언제 종료될 것인가를 잘 지정하는 것이 중요. 
우리는 while 문 안의 코드를 3번 반복시키는 것. 
그러기 위해서 두 줄의 코드가 몇번 실행되는지 어딘가에 적어둘 필요가 있음. 
그것을 하기 위해 변수가 필요.
그리고 관습적으로 변수 i에 그런 역할을 부여함.
그리고 반복문이 실행될 때마다 i의 값을 1씩 증가시킴. 
i = i + 1 은 기존의 i의 값에 1을 더한 결과를 i의 새로운 값으로 준다는 뜻. 
그러면 i가 0부터 실행해서 while 중괄호 안의 코드가 실행될 때마다 
i가 1씩 증가할 텐데 3번 반복하게끔 하려면 조건을 어떻게 줘야 할까요?

while(i<3) 라는 조건을 지정하면 됨. 

while 반복문을 이용해 2,3 번째 코드를 3번 반복. 

<h2>2, 3번째 코드 3번 반복</h2>
    <script>
      document.write('<li>1</li>');
      var i = 0;
      while(i<3) {
        document.write('<li>2</li>');
        document.write('<li>3</li>');
        i = i + 1;
      }
      document.write('<li>4</li>');
    </script>

순서도 i = 0 일 때, 실행되고 
i = 3 일 때, 빠져 나옴. 

------------------------------------------------
제목 
22 배열과 반복문 
배열과 반복문을 함께 활용해 각각의 개념과 기능이 결합해서
어떤 강력한 시너지를 내는지 살펴봄. 

실습 
새파일 : ex8.html 만들기. 
먼저, 자바스크립트 없이 문제를 만들기. 
<ul> 태그와 <li> 태그를 통해 동료들의 이름을 작성. 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Document</title>
</head>
<body>
<h1>Loop & Array</h1>  
<h2>Coworkers</h2>
<ul>
  <li>egoing</li>
  <li>leezche</li>
  <li>duru</li>
  <li>taeho</li>
</ul>
</body>
</html>

그런데 만약 <li> 태그 대신 목록이 아주 복잡한 태그이고
이것에 대한 수정이 빈번하게 일어난다면 힘듦. 
서로 연관된 데이터들을 담는 방법이 무엇이었나요?
배열 
그리고 배열에 담긴 데이터를 순차적으로 꺼내서 <li> 라는 
태그를 만드는 역할을 반복문이 할 수 있음. 
<script> 태그를 만들고, 작성. 

배열 만들기. 

<h2>Co workers2</h2>
<script>
  var coworkers = ["egoing", "leezche", "duru","taeho"];
</script>
while(i<3) -> while(i<coworkers.length) -> 
배열 안의 각 항목들을 원소(element)라고 함. 
그러면 coworkers라는 변수가 가리키는 이 배열에 담긴 데이터를 
하나하나 꺼내서 <li> 태그를 만들면 됨. 
즉, document.write('<li></li>'); 같은 형태의 데이터로 
만들어서 넣으면 될것임. 
이러면 4번 실행해야함. 
코드 실행 4번 반복하는 코드

<h2>Coworkers3</h2>
<ul>
  <script>
    var i = 0;
    while(i < 4) {
      document.write('<li></li>');
      i = i + 1;
    }
  </script>
</ul>

우선 카운트 정하기. 
0부터 시작해서 while 문의 중괄호 안의 코드가 실행될 때마다 i 의 값을 
1씩 증가하게 함. 그리고 조건으로 'i가 4보다 작은 동안 반복함'라고 지정. 

이제 coworkers라는 변수에 할당된 배열에서 반복문이 실행될 때마다 
원소값을 하나하나 가져와 <li> 태그 안에 배치 하면됨. 

배열의 인덱스와 i 변수의 값의 변화가 일치함. 

배열에서 데이터를 가져와서 출력 

<h2>Coworkers3</h2>
<ul>
  <script>
    var coworkers = ["egoing", "leezche", "duru","taeho"];
    var i = 0;
    while(i < 4) {
      document.write('<li>'+ coworkers[i] + '</li>');
      i = i + 1;
    }
  </script>
</ul>

방금 작성한 코드는 완벽 하지 않음. 
예) coworkers에 "graphittie" 라는 멤버를 추가하면 
페이지 새로고침 하면 결과가 안바뀜. 
그러면 while 조건에 4 대신 5를 넣어 수정해야 함. 그리고 
만약 한 명이 줄어든다면, 값이 없다는 뜻에서 'undefined'가 출력됨. 

프로그래머들이 수치스럽게 생각하는 것 중 하나는 데이터가 바뀌었다고 
로직을 바꾸는 것. 
데이터가 바뀌면 바뀐 데이터에 따라 프로그램이 유연하고 다이내믹하게 바뀌기를 원함. 
그럼 5라는 숫자 대신 무엇을 넣으면 이 그림이 완성 될까? 

coworkers의 배열에 담긴 원소의 개수가 조건에 올수 있다면 
직접 개수를 입력하지 않더라도 탄력적으로 동작. 
5 대신 -> coworkers.length를 넣고 실행. 
반복문에 전혀 신경 쓸 필요 없이 상단에 있는 데이터 자체에만 
집중하면 되는 굉장한 효과를 얻음. 

 <script>
    var i = 0;
    while(i < coworkers.length) {
      document.write('<li>'+ coworkers[i] + '</li>');
      i = i + 1;
    }
  </script>

만약, 어떤 이유로 링크를 추가하고 싶을 때 <li> 태그가 1억개라면 
1억 개를 모두 바꿔야 하지만 이제 우리는 
다음과 같이 코드를 변경하기만 하면 링크가 완성되고, 
각 링쿠의 주소는 'a.com/'에 각 사람의 닉네임 오는 식으로 
만들 수 있음. 

<li> 태그에 링크 추가. 

  <script>
    var i = 0;
    while(i < coworkers.length) {
      document.write('<li><a href=http://a.com/'+ coworkers[i] + '>' + coworkers[i] + '</a></li>');
      i = i + 1;
    }
  </script>

링크 클릭하면 주소부분 확인 하기. 

이것이 배열과 반복문을 결합했을 때 얻을 수 있는 폭발적인 효과. 
즉 배열이라는 것은 순서대로 연관된 데이터를 잘 정리 정돈 하는 것이고, 
반복문은 순서대로 배열에 담긴 데이터를 하나씩 꺼내서 자동화된 처리를 
할 수 있는 문법이기 때문에 , 두 개의 기능의 조화가 좋음. 

웹 브라우저와 상관없이 순수하게 살펴봄. 

---------------------------------------------------------
제목 
23 배열과 반복문의 활용 
이제 배열과 반복문을 주간 모드/ 야간 모드에 투입. 
야간 모드 : 링크들이 밝게 표시
주간 모드 : 링크들이 다소 어두운 계열로 표시

검색하는 법을 알려줘라. 
검색은 소프트웨어를 만드는 것의 일부. 
검색 지향 프로그래밍. 

웹 페이지 우클릭 -> 검사 -> Elements 탭 선택 -> Esc 키 누르기. 
콘솔을 동시에 열기. 
크롬 웹 브라우저 단축키 : crtl + shift + j 

css에서 a는 이 웹 페이지의 모든 <a> 태그를 가져오라는 의미,
결과적으로 맨 처음 하나만 가져옴. 
querySelector() 는 우리 목적에 안맞다. 

검색: javascript get element by css selector multiple
https://www.w3schools.com/jsref/met_document_queryselectorall.asp

querySelectorAll을 사용하라고 답변. 

검색: javascript querySelectorAll 
어떻게 사용하는지?
https://www.w3schools.com/jsref/met_document_queryselectorall.asp

다시 콘솔 창에 와서 다음 코드를 변경하고 실행. 

ex8.html 에서 하고 있는 중. 

document.querySelectorAll('a');

모든 <a> 태그를 가져와서 alist 변수에 넣고 출력하기 

var alist = document.querySelectorAll('a');
console.log(alist[0]);
console.log(alist[1]);
console.log(alist.length);

배열의 인덱스로 0을 지정하면 첫 번째 태그가 나오고, 
배열의 인덱스로 1을 지정하면 두 번째 태그가 나오고, 
console.log(alist.length);를 지정하면 
몇개의 <a> 태그가 담겨 있는지 개수를 출력. 

이제, 반복문을 이용해 alist라는 변수에 담긴 태그를 
하나하나 꺼내서 그것의 style 속성을 지정하기. 

반복문 부터 확인. 
alist에 <a> 태그의 목록이 담긴 배열을 담았음. 
그리고 코드는 나중에 실행할 것이므로 

shift + enter 누름. : 다음 줄 이동.

그리고 while 문으로 반복문 작성. 

반복문으로 모든 링크 출력하기. 
var alist = document.querySelectorAll('a');
var i = 0;
while ( i < alist.length) {
console.log(alist[i]);
i = i + 1;
}
결과 화면 
모든 <a> 태그를 화면에 출력. 

코드를 추가해 <a> 태그들의 style 값이 어떻게 바뀌는지 보겠음. 

반복문에서 링크의 글자색 변경. 

반복문으로 모든 링크 출력하기. 
var alist = document.querySelectorAll('a');
var i = 0;
while ( i < alist.length) {
alist[i].style.color = 'powderblue';
console.log(alist[i]);
i = i + 1;
}

var alist = document.querySelector('a');
var i = 0;
while ( i < alist.length) {
alist[i].style.color = 'powderblue';
console.log(alist[i]);
i = i + 1;
}


이 코드를 복사해서 3.html에 적용 하기. 
야간 모드일 경우에는 <a> 태그의 글자색을 
'powderblue'로 만들고, 
주간 모드일 경우에는 <a> 태그의 글자색을 
'blue'로 만들기

 <h1><a href="index.html">WEB</a></h1>
        <input type="button" value="night" onclick="
        var target = document.querySelector('body');
        if (this.value === 'night') {
            target.style.backgroundColor = 'black';
            target.style.color = 'white';
            this.value = 'day'

            var alist = document.querySelectorAll('a');
            var i = 0;
            while ( i < alist.length) {
                    alist[i].style.color = 'powderblue';
                    console.log(alist[i]);
                    i = i + 1;
                }
        } else {
            target.style.backgroundColor = 'white';
            target.style.color = 'black';
            this.value = 'night'

            var alist = document.querySelectorAll('a');
            var i = 0;
            while ( i < alist.length) {
                    alist[i].style.color = 'blue';
                    console.log(alist[i]);
                    i = i + 1;
                }

            }
        ">
개발자 도구에서 누를 때마다 코드가 어떻게 바뀌는지 확인. 

반복문이라는 것을 이용하면 아주 많은 일을 손쉽게 처리 가능. 
그리고 컴퓨터는 많은 경우에 서로 연관된 데이터를 배열의 형태로 
돌려주기 때문에 배열은 무척 중요하고 반복문도 정말 중요한 개념. 

------------------------------------------
제목 
24 함수 예고 

함수라는 도구를 살펴보자. 
영어로 function -> 떠오르는 이미지는 수납상자. 
코드가 많아지면 그 코드를 잘 정리 정돈하기 위한 도구.
아주 간다하며 강력한 도구가 함수이고, 그것보다 좀 더 큰 도구는 객체.
객체는 나중에.
함수 소개, 관련된 이론 다음 시간. 

<input> 태그 안에 코드가 하나 있고 자바스크립트 코드가 
onclick 안에 들어 있음. 
극단적으로 생각해서 <input> 태그를 1억 개 작성해야 한다고 상상. 
중복된 코드라고 확신 할수 있을까? 어렵다. 
길이도 길고 , 어느 정도 되면 사람이 확인하기 어려움. 
코드 양 많아지고, 웹 페이지 크기도 크고, 인터넷을 통해 전송할 때 
비용과 시간과 노력이 들어가게 됨. 
이러한 상황에서 구원해주는 도구가 함수. 

중복된 코드를 먼저 잘라내기. 

중복된 코드를 <script> 태그로 옮기기 
<script>
var target = document.querySelector('body');
        if (this.value === 'night') {
            target.style.backgroundColor = 'black';
            target.style.color = 'white';
            this.value = 'day'

            var alist = document.querySelectorAll('a');
            var i = 0;
            while ( i < alist.length) {
                    alist[i].style.color = 'powderblue';
                    console.log(alist[i]);
                    i = i + 1;
                }
        } else {
            target.style.backgroundColor = 'white';
            target.style.color = 'black';
            this.value = 'night'

            var alist = document.querySelectorAll('a');
            var i = 0;
            while ( i < alist.length) {
                    alist[i].style.color = 'blue';
                    console.log(alist[i]);
                    i = i + 1;
                }

            }
</script>

그다음으로 복사해온 코드에 이름을 붙이기. 
중괄호 안에 복사한 코드를 넣기. 
이러한 문법을 함수라고 함 
웹 브라우저에게 함수를 만들고 싶다는 의미에서 
function이라는 키워드를 붙이기. 

지금 당장 중요하지 않지만 
function nightDayHandler(self) 라고 바꾸기. 
함수 안에서 this -> self 로 변경. 

function nightDayHandler(self) //함수를 선언하는 위치 : 선언부, 매개변수(parameter) {
// 함수를 구현하는 위치 : 구현부
// 함수를 사용할 때 보통 '호출했다, call' -> 함수를 사용, 호출할 때 안에 있는 변수를 '인자값(argument)'
var target = document.querySelector('body');
        if (self.value === 'night') {
            target.style.backgroundColor = 'black';
            target.style.color = 'white';
            self.value = 'day'

            var alist = document.querySelectorAll('a');
            var i = 0;
            while ( i < alist.length) {
                    alist[i].style.color = 'powderblue';
                    console.log(alist[i]);
                    i = i + 1;
                }
        } else {
            target.style.backgroundColor = 'white';
            target.style.color = 'black';
            self.value = 'night'

            var alist = document.querySelectorAll('a');
            var i = 0;
            while ( i < alist.length) {
                    alist[i].style.color = 'blue';
                    console.log(alist[i]);
                    i = i + 1;
                }

            }
}

그러면 nightDayHandler에 들어있는 로직을 실행하고 싶을 때는 
nightDayHandler(self) 를 복사해서 
<input> 태그의 onclick 속성에 붙여넣고 
self 대신 this 를 넣습니다. 
이유는 지금 알 필요가 없음. 
다만 nightDayHandler() 라는 코드를 가져다 놨다는 것이 중요. 

버튼을 클릭하면 nightDayHandler 함수가 실행되게 설정. 

<input type="button" value="night" onclick="nightDayHandler(this);">

nightDayHandler(this)라는 뜻은 
nightDayHandler()라는 함수를 실행하라는 뜻. 
실제로 실행되는 내용은 nightDayHandler()의 중괄호 안의 부분. 
결과는 똑같지만, 내부적으로 완전히 다른 효율성을 갖는 코드가 됨. 

함수를 사용 하므로, 안에 색을 변경시 1만 변경해도 1억개를 변경하는 효과. 
유지보수가 극단적으로 좋아짐. 
로직을 파악하고 정체를 분명히 이해 할수 있다. 

---------------------------------------------------------
제목 
25 함수 

이론적으로 정리하는 시간.
영어로 function이라 하고 
객체를 배우면 똑같은 함수를 메서드라고 부르는 경우도 있다. 
일단 함수만 기억해보자. 
기본 문법 배우고 매개변수(parameter)와 인자(argument)를 
배우고, return 키워드 배우면 끝. 
function sum(a, b) { //함수가 정의된 부분에 소괄호 안에 변수 이름: 매개변수.
 return a+b
}
사용 할 때, 
sum(1,2); // 1,2 이부분의 인자. -> 함수를 호출한다. call 

새파일 : ex9.html 만들기. 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Document</title>
</head>
<body>
  <h1>Function</h1>
  <h2>Basic</h2>
  <ul>
    <script>
      document.write('<li>1</li>');
      document.write('<li>2-1</li>');
      document.write('<li>2-2</li>');
      document.write('<li>3</li>');
    </script>
  </ul>
  <h2>Parameter & Argument</h2>
  <h2>Return</h2>
</body>
</html>

2-1,2-2 부분을 반복해야 한다고 가정. 

  <script>
      document.write('<li>1</li>');
      document.write('<li>2-1</li>');
      document.write('<li>2-2</li>');
      document.write('<li>3</li>');
	  document.write('<li>2-1</li>');
      document.write('<li>2-2</li>');
    </script>

이런 경우에는 어떻게 ? -> 반복문 쓰기.

그런데 반복문을 쓸 수 없는 경우가 있음. 
연속되지 않게 반복 된다면 반복문 사용이 불가능. 
극단적인 예 적용. 1개가 아니라 -> 1억개. 

이때, 함수가 등장. 
먼저, 반복적으로 등장하는 코드를 복사. 
함수가 등장 했기 때문에 function 을 적기. 
그리고 함수의 이름을 웹 브라우저에게 알려줌. 
여기서 two 라고 지정. 
중괄호 안에 반복되는 , 즉 재사용하고 싶은 코드를 붙여 넣기. 

function sum (num1, num2) {
 result = 0;
 result = num1 + num2 ;
 return result
 }
 
 num1 = 2;
 num2 = 2;
 
 sum (num1, num2);
 sum (1, 2);
 sum ();

<script>
function two() { // 매개변수가 없음, 함수정의를 하는 부분
document.write('<li>2-1</li>');
document.write('<li>2-2</li>');
}
document.write('<li>1</li>');
two(); // 인자값이 없음, 함수 사용하는 부분
document.write('<li>3</li>');
two();
</script>

실행 결과는 같지만 내부적으로 완전히 다른 메커니즘으로 구동. 
웹 브라우저는 function two() 라는 코드를 보면 
function 과 중괄호를 보고 two라는 함수를 만들려고 하고, 
그 함수의 내용은 중괄호 안의 내용임을 생각하고 기억함. 
그리고 two(); 를 보면 웹 브라우저는 two라는 함수를 실행하고 싶구나.
그래서 two 함수의 코드를 two(); 가 위치하는 곳에 있는 것처럼 실행. 
이게 함수의 기본적인 문법. 

다음 시간에 매개변수(parameter)와 인자(argument), return에 대해 살펴보기. 

---------------------------------------------------------------------

제목 
26 매개변수와 인자 
지금 함수의 예 
자판기에 하나밖에 없어서 언제나 똑같은 제품을 받을 수 있는 자판기. 
충분히 편리하지만, 아쉽다. 
원하는 제품을 선택하면 그 제품에 해당하는 제품을 제공하는 자판기. 
훨씬 더 유용. 
제품을 선택 하는 것 : 입력. 
자판기가 그 입력에 대해 해당하는 제품을 제공하는 것을 출력. 
함수가 어떤 효용이 있고, 문법적으로 어떻게 구성돼 있는지 살펴보자. 

입력에 해당하는 매개변수(parameter) 또는 인자 (argument)
출력에 해당하는 return 과 관련. 
p441

1+1 을 출력하는 코드 작성 

<h2>Parameter & Argument</h2>
<script>
	document.write(1+1);
</script>

예상한 결과 2나옴. 
만약 위코드가 1억줄이면 어떻게 함수화 할까?

1+1 함수로 만들기 

<h2>Parameter & Argument</h2>
<script>
	function onePlusOne() {
	document.write(1+1);
	}
	onePlusOne();
	
</script>

결과 화면 같음. 

이처럼. onePlusOne() 함수는 언제나 똑같이 동작하는 함수. 
실행할 때 입력값을 주면 함수가 그 입력값에 따라 다른 결과를 
출력한다면 멋지겠죠?
예) sum(2,3); -> 5 

입력값에 따라 다른 결과를 출력하는 함수로 만들기 

ex9.html 


<h2>Parameter & Argument</h2>
<script>
	function onePlusOne() {
	document.write(1+1);
	}
	onePlusOne();
	
</script>

sum(2,3); 과 비교하면 function 옆에 있는 sum 이름이 같음. 
2와 3이라는 값은 위 코드의 괄호 안에 각각 들어감. 
그래서 2에 해당하는 첫 번째 자리에는 left 를 쓰고 
3에 해당하는 두 번째 자리에는 right 라는 변수 정의. 
바로 이러한 변수를 매개하는 변수라 해서 매개변수(parameter)라고 함. 
이 코드를 시행한다면 left 의 값은 2가 되게 약속돼 있고,
right의 값은 3이 되도록 약속됨. 
 
실행 결과. 
잘 나옴. 
만약, sum() 안의 코드가 1억 줄 짜리이면, 
굉장히 복잡해짐.
!!!!!
함수로 전달하는 2,3 이라는 값을 인자(argument) 라고 하며,
이 값을 받아서 함수 안으로 매개하는 변수를 매개변수라 합니다. 
매개변수와 인자는 함수로 들어오는 입력값과 관련된 용어라는 것을 
기억해 두자. 
다음 강의 return.
------------------------------------------------------
제목 
27 함수(return 문)

함수에 관한 마지막 시간. 
함수는 입력과 출력의 두 가지로 이루어졌다고 했음. 

입력은 매개변수와 인자라는 것이며, 이번 시간에 배울 출력은 
return이라는 것과 관련 있음. 
return 배우기 전에 표현식(expression) 이라는 것이 무엇인지 
설명. 

앞에 , sum() 이라는 함수를 실행하면 
document.write(left+right+'<br>'); 이 실행 되겠지만, 
이번에는 실행했을 때 결과가 표현되도록 만들기. 
이를 위해서 return 알아야 함. 

ex9.html
앞서 작성한 코드 
<script>
function sum(left, right) {
 document.write(left+right+'<br>');
 }
 sum(2,3);
 sum(3,4); 
 </script>
 
sum()으로 함수를 호출하면 함수 안에서 document.write() 까지 
알아서 실행해 줍니다. 
즉, 먼저 좌항과 우항을 더하고, 다음으로 <br> 태그를 뒤에 추가해서 
줄바꿈하고, 마지막으로 화면에 출력까지 합니다. 

다양한 방법으로 사용한다면, 

덧셈한 결과를 빨간색으로 출력하는 새로운 함수 
sumColorRed() 

<script>
function sum(left, right) {
 document.write(left+right+'<br>');
 }
function sumColorRed(left, right) { // 매개변수 이름을 정할 때 단어가 바뀌면서 첫 글자를 대문자로 적어줌(camel 뭐시기)
document.write('<div style="color: red;">' + left+right+'</div><br>');
}
 
 sum(2,3);
 sumColorRed(2,3);
 sum(3,4); 
 </script>
 
두 값을 더하는 작업이 다양한 곳에서 사용된다면 이것은 필요에 따라 
상당히 많은 함수를 만들어야 한다는 것을 의미함. 
이럴 때 return이 우리를 구해줌. 

이번에 sum2() 라는 함수. 

<script>
function sum2(left, right) {
 
 }
document.write(sum2(2,3) + '<br>');
document.write('<div style="color: red">'+ sum2(2,3)+'</div><br>');
document.write('<div style="font-size: 3rem">'+sum2(2,3)+'</div><br>');
</script>

그렇다면 sum2(2,3)을 실행했을 때 sum() 처럼 무엇인가를 알아서 실행하는 것이 아니라 
sum2()를 실행한 결괏값을 돌려준다면 어떨까? 
돌려준다가 영어로 무엇인가요? return 입니다. 

다음 코드 결과를 보면 같은 결과가 나옴. 

return 문 추가. 
<h2>Return</h2>
            <script>
                function sum2(left, right) {
                    return left + right;
                }
                document.write(sum2(2, 3) + '<br>');
                document.write('<div style="color: red">'+ sum2(2,3) + '</div><br>');
                document.write(
                    '<div style="font-size: 3rem">' + sum2(2, 3) + '</div><br>'
                );
            </script>
5는 5인데 평범한 5와 붉은색 5, 커다란 5가 제각기 출력됨. 
앞서 계산이라는 기능만을 sum2() 함수에 구현함으로써 원자화된 기능을 다양한 맥락에서 
사용할 수 있는 자유가 생김. 이것이 바로 return이 우리에게 해주는 엄청난 혜택. 

sum2() 라는 것이 별것 아닌 것 같지만 함수라는 것이 무엇이고, left, right 라는 
매개변수를 통해 들어간 값을 return을 통해 출력함으로써 다양한 용도로 함수를 활용할 수 있게 
된다는 무척이나 중요한 이야기를 전해줌. 
-----------------------------------
제목 
28 함수의 활용. 
3.html 의 night/day 버튼을 함수를 이용해 효율적으로
바꾸는 작업 
동작하는 내용은 똑같지만 코드를 효율적으로 만드는 것을 리팩터링.
함수는 리팩터링의 굉장히 중요한 수단중 하나로서 아주 중용한 역할. 
<input> 버튼이 1억 개가 생긴다면 힘들다. 
그래서 <input> 버튼의 자바스크립트 코드를 복사해서 <head> 태그 안쪽에 
<script> 태그를 만들어 붙여 넣음. 
그리고 웹 브라우저에게 이러한 일련의 코드가 nightDayHandler() 라는 
이름의 함수라는 것을 알려줌. 

nightDayHandler() 함수를 만들고 <input> 버튼의 자바스크립트 코드 넣기. 

3.html 
인자값.
onclick
nightDayHandler(인자값의 자리입니다. ); 함수를 사용할 때 안에 들어가는 이름. 
파라미터 값. 
  <script>
        function nightDayHandler(매개변수 자리입니다.) { 함수를 호출해서, 함수가 정의된 변수 자리를 매개변수.
============================================================

<input type="button" value="night" onclick="nightDayHandler();">
        <script>
        function nightDayHandler() {
            var target = document.querySelector('body');
                    if (this.value === 'night') {
                        target.style.backgroundColor = 'black';
                        target.style.color = 'white';
                        this.value = 'day'
            
                        var alist = document.querySelectorAll('a');
                        var i = 0;
                        while ( i < alist.length) {
                                alist[i].style.color = 'powderblue';
                                console.log(alist[i]);
                                i = i + 1;
                            }
                    } else {
                        target.style.backgroundColor = 'white';
                        target.style.color = 'black';
                        this.value = 'night'
            
                        var alist = document.querySelectorAll('a');
                        var i = 0;
                        while ( i < alist.length) {
                                alist[i].style.color = 'blue';
                                console.log(alist[i]);
                                i = i + 1;
                            }
            
                        }
            }
        </script>

위 코드는 문제 코드. 

아래에 this , self 설명 과정. 

이 로직들은 함수를 구성하는 실제코드가 됨. 
그리고 onclick 속성값으로 nightDayHandler();를 지정하고 
페이지를 새로고침

onclick 속성값으로 nightDayHandler() 지정. 
매개변수 자리에 this 설명 함.		
<input type="button" value="night" onclick="nightDayHandler();">

그런데 버튼을 클릭해도 아무런 변화가 안 생기고, 한 번 더 클릭해야 그제서야 변화가 생기는데 
또 따시 클릭해도 night와 day라는 레이블은 바뀌지 않는 상태임. 
뭔가 잘못 됐음. 

onclick 이벤트 안에서 this는 이 이벤트가 소속된 태그를 가리키도록 약속돼 있음. 
this -> 자기 자신. 
예) 전화 받을 때, this is 상용. 

독립된 nightDayHandler() 안의 코드에서 this 라는 값은 더 이상 input 버튼이 아니고, 
전역 객체를 갖게 됨. 당장 전역 객체 몰라 됨. 함수 안에서 this 값이 
input 버튼을 가리키도록 nightDayHandler()이 실행될 때 this 값을 줌. 
그리고 function nightDayHandler(self) 로 코드를 바꿔서 
this 라는 인자를 self 라는 매개변수로 받는다. 

함수 안의 코드에서 this 를 self로 변경함. 

완성 코드.
 <input type="button" value="night" onclick="nightDayHandler(this);">
        <script>
        function nightDayHandler(self) {
            var target = document.querySelector('body');
                    if (self.value === 'night') {
                        target.style.backgroundColor = 'black';
                        target.style.color = 'white';
                        self.value = 'day'
            
                        var alist = document.querySelectorAll('a');
                        var i = 0;
                        while ( i < alist.length) {
                                alist[i].style.color = 'powderblue';
                                console.log(alist[i]);
                                i = i + 1;
                            }
                    } else {
                        target.style.backgroundColor = 'white';
                        target.style.color = 'black';
                        self.value = 'night'
            
                        var alist = document.querySelectorAll('a');
                        var i = 0;
                        while ( i < alist.length) {
                                alist[i].style.color = 'blue';
                                console.log(alist[i]);
                                i = i + 1;
                            }
            
                        }
            }
        </script>
		
그러고 나서 페이지를 새로고침하면 잘 동작함. 
이렇게 되면 <input> 버튼들이 1억 개라 해도 각 버튼이 알아서 잘 동작함. 
코드도 훨씬 더 줄고, 함수의 이름을 보고 주간모드/야간모드를 다루는 코드라는 것을 
알수 있음. nightDayHandler() 함수의 내용을 바꾸면 이를 실행하는 
1억개의 사용처에도 변경사항이 모두 적용되는 효과가 생김. 
--------------------------------------------------------------
제목 
29 객체 예고 
새로운 도구 도입. -> 객체(object).
객체는 중요하지만, 엄청 어려움. 프로그래밍 배울 때 큰산 2개. 
함수, 객체. 
객체는 함수라는 기반 위에 객체라는 것이 존재. 지금 까지 배운 내용의 심화 내용. 
객체의 여러 얼굴 중 딱 하나만 소개.
객체의 특성, 존재 이유, 기능에 집중하고 파악해보기. 
앞으로 공부 하면서 주변 둘러보고, 경험을 쌓으며 객체라고 하는 것의 
여러 가지 얼굴들을 하나하나 익혀 나가면서 객체를 잘 다루는 개발자 되기.

공부 할 하나의 얼굴 -> 정리 정돈의 수단으로서의 객체. 
프로그래밍 하다 보면 코드가 많아지고, 잘 정리 정돈하기 위해 함수를 사용 했음. 
함수뿐만 아니라 변수도 많아지면 복잡도의 한계에 도달하게 됨. 
이러한 상황에서 연관된 함수와 변수를 같은 이름으로 그루핑해서 잘 정리 정돈 하기위한 
도구를 객체라고 해보자. 

중복된 코드 함수로 독립 시키기. 

중복되는 코드 
var alist = document.querySelectorAll('a');
var i = 0;
while ( i < alist.length) {
		alist[i].style.color = 'powderblue';
		console.log(alist[i]);
		i = i + 1;
이 코드는 이 웹 페이지에 있는 모든 <a> 태그에 대해 색상을 
'powderblue'와 'blue'로 지정하는 코드. 

함수를 설정하다라는 뜻의 set과 색깔을 나타내는 color를 합쳐 
setColor 로 함수이름 지정하고, 
매개변수로 color를 설정한 다음 중괄호 안에 중복된 코드를 붙여 넣기. 
그리고 color를 각각 'powderblue'와 'blue'로 설정하던 부분을 
매개변수를 통해 값을 바꿀 수 있게 함. 
그리고 nightDayHandler 함수에서는 
setColor('powderblue');
setColor('blue');
를 호출하도록 처리.

function setColor(color) {
var alist = document.querySelectorAll('a');
var i = 0;
while ( i < alist.length) {
		alist[i].style.color = color;
		console.log(alist[i]);
		i = i + 1;
	}
}
setColor(blue);-> 함수를 사용한다. 또는 함수를 호출한다. 
var color = "blue";

  <input type="button" value="night" onclick="nightDayHandler(this);">
 <script>
            function setColor(color) {
                var alist = document.querySelectorAll('a');
                var i = 0;
                while (i < alist.length) {
                    alist[i].style.color = color;
                    console.log(alist[i]);
                    i = i + 1;
                }
            }

            function nightDayHandler(self) {
                var target = document.querySelector('body');
                if (self.value === 'night') {
                    target.style.backgroundColor = 'black';
                    target.style.color = 'white';
                    self.value = 'day'

                    setColor('powderblue');
                }
             else {
                target.style.backgroundColor = 'white';
                target.style.color = 'black';
                self.value = 'night'

                setColor('blue');
            }
         }
</script>

잘 동작함. 

아래 코드 중 중복된 부분 보기. 
target.style.color = 'white';
:
target.style.color = 'black';

이 코드는 이 웹 페이지의 <body> 태그의 글자 색상을 흰색으로 설정한다는 뜻.
물론 한 줄밖에 되지 않기 때문에 함수화하는 것은 별로 의미가 없지만, 
한 줄이어도 그 의미가 불명확하거나 시간이 지나면 무슨 뜻인지 파악하기 
어렵다면 함수를 통해 그 로직에 이름을 부여하는 것도 아주 좋은 전략. 
이 코드가 한줄이 아니고 여러 줄의 코드라고 하면 

글자색을 변경하는 setColor 함수 만들기. 

function setColor(color) {
document.querySelector('body').style.color = color;
}

이미 같은 이름의 함수가 존재해서 기존 코드가 그다음에 나온 코드에 의해 덮어쓰여지므로 
삭제되는 결과 발생. 
처음 함수 이름을 setColor -> LinksSetColor(); 로 변경. 
setColor 라는 이름이 충돌하지 않도록 -> BodySetColor() 라고 변경. 
그럼 잘동작. 

function BodySetColor(color) {
document.querySelector('body').style.color = color;
}

마찬가지 target.style.backgroundColor = 'black';
이 코드 함수화 하기. 
함수 이름 :BodySetBackgroudSetColor()

function BodySetBackgroudSetColor(color) {
document.querySelector('body').style.backgroundColor = color;
}

변경 후 코드. 
  <input type="button" value="night" onclick="nightDayHandler(this);">
        <script>
            function LinksSetColor(color) {
                var alist = document.querySelectorAll('a');
                var i = 0;
                while (i < alist.length) {
                    alist[i].style.color = color;
                    console.log(alist[i]);
                    i = i + 1;
                }
            }

            function BodySetColor(color) {
                document
                    .querySelector('body')
                    .style
                    .color = color;
            }

            function BodySetBackgroudSetColor(color) {
                document
                    .querySelector('body')
                    .style
                    .backgroundColor = color;
            }

            function nightDayHandler(self) {
                var target = document.querySelector('body');
                if (self.value === 'night') {
                    BodySetBackgroudSetColor('black');
                    BodySetColor('white')
                    self.value = 'day'
                    LinksSetColor('powderblue');
                } else {
                    BodySetBackgroudSetColor('white');
                    BodySetColor('black');
                    self.value = 'night'
                    LinksSetColor('blue');
                }
            }
        </script>

역시 잘 동작함. 

그런데 이름을 이렇게 바꾸는 것도 방법이지만 자바스크립트를 만든 사람들은 이런 경우에도

사용하라고 객체라는 것을 장만함. 
즉 서로 연관된 함수와 변수를 그루핑해서 정리 정돈하기 위한 수납상자로서 객체라는 것이 
존재하는 것임. 
객체를 도입하면 객체를 사용하는 쪽의 코드는 어떻게 바뀌는가에 대해 
먼저 살펴 보기. 
Body 라는 객체와 
Links 라는 객체가 있다면 코드를 다음과 같이 작성 가능. 

임시 코드. 
Body.setBackgroundColor('black');
Body.setColor('white');
:
Links.setColor('powderblue');
이런 형태로 사용 가능. 

단순히 함수의 이름 자체를 바꾸는 것보다 낫나요?
객체라는 것을 폴더라는 관점에서 보셔도 됨. 
또, document 라는 것도 객체. 
document.querySelector() 의 형태를 보면 
querySelector() 라는 것이 document라는 객체에 속한 함수라는 것을 알수 있음. 
그리고 객체 속한 함수는 함수라 하지 않고 메서드라고 부름. 

다음 시간 객체의 이론. 
--------------------------------------------------------------------
제목 
30 객체 쓰기와 읽기 

새파일 : ex10.html 
파일에 객체를 생성해서 객체에 대한 여러 가지 사항을 살펴봄. 
양이 많아지면 서로 연관된 정보를 정리 정돈하기 위한 도구 ? 배열. 
배열은 순서에 따라 정리 정돈.
배열 연습. 
우클릭 -> 검사 -> 콘솔 탭 선택. 
단축키 : ctrl + shift + j

var coworkers = ["egoing", "leezche"];
coworkers[0];
coworkers[1];
인덱스를 통해 각 사람을 가져옴. 
배열은 정보를 담는 그릇 동시에 정보가 순서대로 저장된다는 특징. 

순서 없이 저장할 수 있는 정보 -> 객체. 
이름 있는 정리 정돈 상자 -> 객체. 

객체 문법. 
<script>
 var coworkers = {
 
 }
</script>
coworkers 라는 변수에 객체를 담을 예정. 
객체를 만들 때 사용하는 기호를 객체 리터럴(object literal) 이라함. 
배열은 대괄호, 객체는 중괄호 사용. 
현재 빈 객체. 
객체에 "egoing" 이라는 정보 넣기. 
"programmer" : "egoing"
"designer" : "leezche"

컬렉션(여러 데이터를 다루는 저장공간)의 종류들
리스트, 셋, 맵
list, set, map
JSON(JavaScript Object Notation) -> 맵 형태의 컬렉션과 비슷
키 : 밸류값 의 형태로 진행
데이터 단위를 사용할 때, 주로 많이 쓰는 데이터 단위.

<script>
 var coworkers = {
 "programmer" : "egoing",
"designer" : "leezche"
 }
</script>

그러면 coworkers 라는 객체에 "egoing" 이라는 정보를 "programmer" 라는 
딱지를 붙여서 저장. 

정보를 꺼낼 때 

객체에서 정보 가져오기. 

document.write("programmer : " + coworkers.programmer + "<br>");

coworkers 다음에 있는 점(.)은 객체 접근 연산자(object access operator)라함. 
객체에 접근하는 연산자라는 뜻. 
디자이너 접근도 이렇게 
document.write("designer : " + coworkers.designer + "<br>");

이제 객체 만들고, 접근 하는 방법 봄. 
정보를 추가하고 싶다면?

객체에 정보 추가하기. 

coworkers.bookkeeper = "duru";

가져오기. 
document.write("bookkeeper : " + coworkers.bookkeeper + "<br>");

만약, "data scientist" 추가 하고 싶다. 
coworkers.data scientist = "taeho";
공백 문법적 오류. 
대괄호를 써서 문자열 형태로 넣으면 됨. 

추가
coworkers["data scientist"] = "taeho";
가져오기 
document.write("data scientist : " + coworkers["data scientist"] + "<br>");
호출시  객체 이후에 점 제거하고 사용하기. 

객체의 기본적인 생성법과 객체의 데이터를 가져오는 법, 객체에 데이터를 넣는 법 봤음. 
------------------------------------------------------------------
제목 
31 객체와 반복문

객체를 생성하는 방법. 
그런데 생성된 객체에 있는 데이터를 모조리 다 가져와야 하는 경우가 있음. 
그런 경우 반복문을 써서 배열에서 데이터를 가져온 것처럼 
객체에서도 가져오는 방법을 알아봄. 
검새: javascript object iterate 
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for...in

for .. in 을 쓰라고 나옴. 
이 내용을 토대로 coworkers 의 모든 객체를 꺼내서 화면에 출력하는 코드. 

<h2>Iterate</h2>
<script>
	for(var key in coworkers) {
	 // coworkers라는 객체에 자료가 4개가 있고, 여기서 하나씩 꺼내어서 변수 이름 key라는 곳에 하나씩 할당함.
	 // 반복을 4번 하겠다. 전체 내용을 다 반복을 하겠다라는 의미.
	 // 이런 종류의 for 문, 향상된 for라고 부르는 경우는 자바.
	 // 사실은 다른 언어에서 그냥 자연스럽게 사용하고 있다. ex) 자바, 
	}
</script>

사용된 for는 coworkers라는 변수가 가리키는 객체에 있는(in) 
key 값을 가져오는 반복문입니다. 
여기서 말하는 key 값은 "programmer", "designer", "bookkeeper", "data scientist"
를 가리킴. 
즉, key 라는 것은 우리가 가져오고 싶은 정보에 도달할 수 있는 열쇠를 말함. 
그래서 key 라고 부름. (배열에서는 key 라는 표현보다는 index 라는 표현을 씀) 
coworkers에 있는 key를 하나하나 꺼내서 중괄호에 있는 코드를 실행하는 명령어가 for 임. 
다시 말해 coworkers라는 객체에 있는 데이터의 수만큼 중괄호 안에 있는 코드가 실행되는데, 
실행될 때마다 key 값이 하나하나 변숫값으로 설정된다는 뜻. 

반복문에서 객체의 키 값 출력 
ex10.html 

<h2>Iterate</h2>
<script>
	for(var key in coworkers) {
	  document.write(key + '<br>');
	}
</script>

실습 코드 
  <script>
    var coworkers = {
    "programmer" : "egoing" ,
     "designer" : "leezche"
    }
    coworkers.bookkeeper = "duru";
    coworkers["data scientist"] = "taeho";
   </script>

  <h2>Iterate</h2>
<script>
	for(var key in coworkers) {
	  document.write(key + '<br>');
	}
</script>

key 값이 모조리 출력. 
특정 데이터를 가져올 때 배열의 형식을 사용해서 인덱스가 들어가는 곳에 
key 값을 넣었더니 데이터를 가져올수 있음. 

반복문에서 객체의 키 값에 해당하는 데이터 출력. 
<h2>값 출력하기.</h2>
<script>
for (var key in coworkers) {
	document.write(coworkers[key] + '<br>');
	}
</script>
	
반복문에서 객체의 키와 값을 (데이터 모두 출력. )

<h1>키와 값 모두 출력하기.</h1>
<script>
for (var key in coworkers) {
	document.write(key + ' : ' + coworkers[key] + '<br>');
	}
</script>
지금까지 객체의 데이터를 순회하는 방법을 살펴봄. 
---------------------------------------------------------
제목 
32 객체 프로퍼티와 메서드 
객체는 데이터를 담을 수 있음. -> 변수, 함수,  객체 -> 정리 할수 있는 수납 공간으로 설명 중.  -> 중복 제거. -> 리팩토링.
문자열, 배열, 숫자, 함수도 담을수 있음. 

객체에 함수 담기. 
ex10.html 

<h2>Property & Method</h2>
<script>
coworkers.showAll = function() {

}
</script>

위 코드는 showAll 이라는 메서드를 추가하는 코드. 
function showAll() { } 과 똑같은 표현. 

showAll() 함수에 있는 코드를 showAll 메서드에 붙여넣기. 

<h2>Property & Method</h2>
<script>
coworkers.showAll = function() {
 for(var key in coworkers) {
	document.write(key + ' : ' + coworkers[key] + '<br>');
}
}
</script>

showAll() 메서드 호출 
coworkers.showAll();

<h2>Property & Method</h2>
<script>
coworkers.showAll = function() {
 for(var key in coworkers) {
	document.write(key + ' : ' + coworkers[key] + '<br>');
}
}
coworkers.showAll();
</script>

출력 결과 확인하기

이 방법 좋은 방법 아니다. 
왜? coworkers의 이름이 showAll() 함수 내에도 있기 때문에 
coworkers 라는 객체의 이름이 바뀐다면 showAll() 함수에서 데이터를 
가져오지 못하는 현상이 생길 수 있음. 
이 문제를 해결하기 위해 showAll() 함수 안에서 이 함수가 소속된 객체를
가리키는 약속된 기호를 사용하면 됨. 바로 this. 

<h2>Property & Method -> this 대체</h2>
<script>
coworkers.showAll = function() {
 for(var key in this) {
	document.write(key + ' : ' + this[key] + '<br>');
}
}
coworkers.showAll();
</script>

같은 결과 출력. 
coworkers의 변수명이 다른 것으로 바뀌어도 this는 자기자신을 가리키기 때문에 영향을 
받지 않는다는 장점이 생김. 
그리고 showAll() 조차도 coworkers에 소속된 데이터이기 때문에 
showAll()도 화면에 표시됨. 
이를 없애기 위해 if 문으로 showAll() 을 제외하는 코드를 작성해도 되지만, 
지금 당장은 중요하지 않음. 

이렇게 해서 객체에 소속된 변수의 값으로 함수를 지정할 수도 있고,
객체에 소속된 함수를 만들 수 있다는 것을 배움. 
그리고 객체에 소속된 함수를 메서드라고 하며, 
객체에 소속된 변수를 프로퍼티라고 함. 
맥락상 같은 것을 부르는 다른 표현들이 있다는 정도만 알고 넘어가자. 
---------------------------------------------------------
제목 
33 객체의 활용 
이번 시간에 나머지 코드를 작성해서 우리도 객체의 소비자 뿐만 아니라 
생산자도 되어 보자. 

앞서 작성한 3.html 예제코드 
표시한 부분으로 바꿔서 사용할 예정. 
<script>


            function nightDayHandler(self) {
                var target = document.querySelector('body');
                if (self.value === 'night') {
                    BodySetBackgroudSetColor('black');
					이부분 아래처럼 변경.
					Body.setBackgroundColor('black');
					
                    BodySetColor('white')
					이부분 아래처럼 변경.
					Body.setColor('white');
					
                    self.value = 'day'
                    LinksSetColor('powderblue');
					이부분 아래처럼 변경.
					Links.setColor('powderblue');
					
                } else {
                    BodySetBackgroudSetColor('white');
					이부분 아래처럼 변경.
					Body.setBackgroundColor('white');
					
                    BodySetColor('black');
					이부분 아래처럼 변경.
					Body.setColor('black');
					
                    self.value = 'night'
                    LinksSetColor('blue');
					이부분 아래처럼 변경.
					Links.setColor('blue');
                }
            }
        </script>

중복되지 않는 함수명으로 작성했던 코드를 바꿔서 Body 라고 하는 변수에 객체 담기. 

<script>
var Body = {

}

</script>

이 객체에 프로퍼티로 setColor를 지정한 다음 function을 지정하면 됨. 

객체에 setColor 프로퍼티 추가 

<script>
var Body = {
 setColor: function(color) {
   document.querySelector('body').style.color = color;
}
}

</script>

객체에 setBackgroundColor 프로퍼티 추가 

<script>
var Body = {
 setColor: function(color) {
   document.querySelector('body').style.color = color;
}
 setBackgroundColor: function(color) {
   document.querySelector('body').style.backgroundColor = color;
}
}

</script>

동작 하지 않음. 크롬 개발자 도구에서 어디에 문제가 생겼는지 확인. 

콘솔 탭에서 오류 메시지 확인. 

객체에서는 프로퍼티와 프로퍼티를 구분하기 위해 콤마를 사용하는데 문제가 생긴 곳을 보면 
각 프로퍼티 사이에 콤마(,)를 넣어야 한다는 것을 알수 있음. 

<script>
var Body = {
 setColor: function(color) {
   document.querySelector('body').style.color = color;
},
 setBackgroundColor: function(color) {
   document.querySelector('body').style.backgroundColor = color;
}
}

</script>

마찬가지로 LinksSetColor() 도 객체로 만들기. 

var Links = {
 setColor: function(color) {
  var alist = document.querySelector('a');
  var i = 0;
  while(i < alist.length) {
  alist[i].style.color = color;
  i = i + 1;
  }
  }
  }
  
index.html 
3.html 변경 후 코드 //Links -> 오타.
document.querySelector ->document.querySelectorAll 변경.
밑에 중복된 함수들 삭제 함.
주의사항. 함수라서 호출 형시 함수명();
Body.setColor('black'); 
Links.setColor('blue');

최종 코드

<script>
            var Body = {
                setColor: function(color) {
                  document.querySelector('body').style.color = color;
               },
                setBackgroundColor: function(color) {
                  document.querySelector('body').style.backgroundColor = color;
               }
               }

               var Links = {
                setColor: function(color) {
                 var alist = document.querySelectorAll('a');
                 var i = 0;
                 while(i < alist.length) {
                 alist[i].style.color = color;
                 i = i + 1;
                 }
                 }
                 }

            
            function nightDayHandler(self) {
                
                if (self.value === 'night') {
                    Body.setBackgroundColor('black');
                    Body.setColor('white');
                    self.value = 'day'
                    Links.setColor('powderblue')
                } else {
                    Body.setBackgroundColor('white');
                    Body.setColor('black');
                    self.value = 'night'
                    Links.setColor('blue')
                }
            }
        </script>
결과 화면 
잘 동작함. 

document가 객체였고, querySelector() 는 함수이고, 객체에 소속돼
있어서 메서드라는 사실. 


------------------------------------------------------
제목 
34 파일로 쪼개서 정리 정돈하기. 
  
정리 정돈 도구인 함수와 객체를 배웠음. 
더 큰 정리 정돈 도구를 살펴보자. 
서로 연관된 코드들을 파일로 묶어서 그루핑하는 것. 
이것을 사용하면 웹 페이지가 아무리 많아도 그 많은 웹 페이지들을 
감당 할수 있음. 

지금 까지 작업한 야간 모드와 주간 모드를 전환하는 버튼을 
다른 페이지인 
1.html ,2.html ,index.html 파일에 붙여넣기. 

<body>
  <input type="button" value="night" onclick="nightDayHandler(this);">

</body>

페이지 전환해서 결과 화면 보기. 

아직 버튼 클릭해도 작동 안함. 
왜? 자바스크립트 배포 안해서 
스크립트 코드를 복사해서 모든 웹 페이지에 배포합니다. 

스크립트 코드 복사해서 1.html ,2.html ,index.html 파일에 붙여넣기.

잘 동작. 

이제 극단적인 생각. 만약 페이지가 1억 개라면 어떤 일이 생길까?
배포도 어렵지만, 안에 내용을 'powderblue' -> 'yellow'로 바꾸고 
싶다면 모든 웹 페이지를 변경해야 합니다. 
그래서, 파일로 쪼개야 합니다. 

colors.js 라는 파일을 만들기. 
공통으로 들어가는 script 안에 내용을 복사해서 
붙여넣기. <script> 태그 제외하고. 

각 1. 2. 3. index ~ 공통 코드를 지우고 

<script src="colors.js"></script> 로 대체함. 

결과 화면 확인하면 정상 동작함. 

하지만 내부적인 구현 방법은 완전히 달라진 상태. 
파일로 쪼개진 상태. 
크롬 개발자 도구로 들어가서 Network 탭을 보면 
웹 브라우저가 몰래 color.js 를 다운로드해서 원래 코드가 
있었던 것처럼 해석 한다는 것을 볼수 있음. 

만약, color.js 값을 변경하면 다른 페이지들도 다 적용되는 것을 
볼수 있음. 
파일 쪼개면 
코드를 복사할 필요 없이 간단하게 , color.js 파일을 새로운 웹 페이지에 
포함시키기만 하면 됨. 

즉, 작성한 코드를 재사용하게 되는 것. 

파일 만 수정하면 모든 웹 페이지에 동시에 변화가 생김. 
유지 보수가 편함. 
가독성이 좋아지고, 
코드가 훨씬 명확해지고,
코드의 의미를 파일이름을 통해 확인 가능. 
정리 정돈 효과.

웹 페이지를 로드하면서 웹 페이지에 접속해서 자바스크립트 파일도
다운로드 해야 하므로 2번 접속 해야 합니다. 
웹 서버 입장에서 안 좋은 일. 
접속이 적을수록 좋음. 
그럼에도 이렇게 하는 편이 훨씬 더 효율적.
왜? 캐시때문에. 
캐시는 저장한다라는 의미인데, 한 번 웹 페이지에서 
다운로드된 파일은 웹 브라우저가 보통 컴퓨터에 저장해 놓음. 
따라서 다음에 접속할 때 저장된 파일을 읽어서 네트워크를 통하지 
않게 함. 
서버 입장에서 훨씬 더 비용을 절감할 수 있고, 사용자 입장에서도 
네트워크 트래픽을 절감할 수 있으며, 훨씬 더 빠르게 웹 페이지를 
화면에 표시할 수 있다는 효과가 생기기 때문에 이렇게 파일로 
쪼개는 것이 훨씬 더 효율적. 돈, 시간 적게 드는 방법. 
---------------------------------------------------------------
제목 
35 라이브러리와 프레임워크 
마지막 수업. 
오늘날 소프트웨어를 만든다고 하면 혼자서 만드는 경우는 없음. 
이유? 누군가 만든 소프트웨어 위에서 동작하는 소프트웨어를 
만들고 있어서.
그뿐만 아니라 우리가 소프트웨어를 만들 때 혼자 만드는 것보다는 
다른 사람이 이미 잘 만든 것을 부품으로 삼아 내가 만들고자 하는 것을 
빠르게 조립해서 만드는 것이 오늘날 소프트웨어를 만드는 중요한 
기본 중의 기본임. 
지금까지 생산자가 되는 방법을 보았고, 
이제부터는 다른 사람이 만든 소프트웨어를 부품으로 삼아 내가 만들고 
있는 소프트웨어의 생산자가 되는 방법을 살펴봄. 
소프트웨어의 사회성. 

알아두면 좋은 키워드 라이브러리와 프레임워크.
두 가지는 비슷. 
다른 사람의 도움을 받아 소프트웨어를 만든다는 점에서 비슷. 
라이브러리는 무엇인가 정리 정돈돼 있는 곳. 
필요한 부품들이 되는 소프트웨어들을 잘 정리 정돈해 놓은, 
재사용하기 쉽게 돼 있는 소프트웨어를 라이브러리라 함. 

프레임워크는 만들고자 하는 경우에 따라. 게임, 웹 사이트, 
언제나 필요한 공통적인 것이 있고, 기획 의도에 따라 달라지는 부분. 
그 중에서 공통적인 부분은 프레임워크라는 것으로 만들어 놓고, 
기능, 특성에 따라 달라지는 부분만 살짝 수정하는 방법.
처음부터 끝까지 만드는게 아니라, 반제품. 

jQuery
먼저, 라이브러리는 가장 유명한 것. 
오래됐고, 안정적인 라이브러리.
직접 코드 작성 하는 것보다 더 효율적.
기본 지식이 있어야 jQuery 를 잘 다룰수 있음. 
jQuery 검색. 

1)다운로드 프로젝트 디렉터리로 옮김
2) CDN 'Content Delivery Network'의 약자. 
직접 라이브러리를 내려받아 프로젝트에 포함시키고 업로드해서 
서비스하면 돈이 들기 때문에 많은 라이브러리들이 CDN을 통해 
자신들의 서버에 파일을 보관해 놓고, 
사용자는 <script> 태그의 src 속성을 통해  가져감. 

그 중에서 Google CDN 이용. 

jQuery -> 다운로드 -> 아래 부분에 linkUsing jQuery with a CDN
이 부분에 Google CDN 
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

3.x snippet: 
참고. 

3.html 에 가서 
color.js 앞에 붙여넣기. 

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="colors.js"></script>

jQuery를 이용해 color.js 파일을 수정해보자. 
jquery를 이용했을 때 가장 놀랐던 점은 처리해야 할 태그가 여러 가지 있을 때 
반복문을 통해 처리해야 하는데 jQuery를 이용하면 
반복문을 쓰지 않아도 된다는 점. 
반복문을 jQuery가 우리 대신 처리해주니 다음과 같은 한 줄짜리 코드로 
같은 일을 할 수 있음. 

기존 코드 수정. 

var Links = {
	setColor: function(color) {
	 var alist = document.querySelector('a');
	 var i = 0;
	 while(i < alist.length) {
	 alist[i].style.color = color;
	 i = i + 1;
	 }
	 }
	 }

setColor: function(color) {
 $('a').css('color', color);
 }
 }

기존 코드 주석처리 하고. 

$('a')는 이 웹페이지에 있는 모든 <a> 태그를 jQuery로 제어하겠다는 뜻. 
검색: jQuery css 
https://api.jquery.com/css/

페이지 하단의 예제를 보면 
css("color", red); 와 같은 식으로 지정하면 되는 것을 확인. 

$('a').css('color', color);

결과 확인 하면 똑같이 동작. 

자바스크립트 코드와 jQuery 코드 중에 어느 게 더 직관적이며 
쉬울까? jQuery가 훨씬 더 직관적. 
jQuery는 새로운 언어가 아니고, 자바스크립트를 통해 우리 대신 
css() 라는 함수를 jQuery가 만들어 둔 것임. 
css() 함수를 이용하면 주석으로 처리한 작업을 
jQuery가 대신 처리해 준다는 것을 보면 됨. 

jQuery를 이용해 기존 코드 수정2

var Body = {
	setColor: function(color) {
 $('body').css('color', color);
  },
  setBackgroundColor: function(color) {
  $('body').css('backgroundColor', color);
  }
 }

결과는 같지만 이제 jquery를 통해 구현한 것이 됨. 

자바스크립트는 가장 빠른 속도로 성장하는 언어 중 하나이며, 
웹이 워낙 중요한 시스템이므로 수많은 라이브러리들이 쏟아져 나오고 있음. 
문법을 잘 아는 것도 중요하지만, 세상에 어떤 라이브러리가 새로 
생겼는지 많이 알수록 많은 일들을 할수 있음. 

지금까지 작업한 내용을 완성해보기. 
CDN을 삽입한 코드를 모든 웹 페이지에 붙여 넣기. 
그러면 페이지 마다 잘 동작하는 모습 확인 가능. 

파일로 로직을 쪼갰을 때 자기가 프로그램을 짤 때도 도움이 되지만 
다른 사람이 정리 정돈한 것을 나의 프로젝트로 가져오는 것에도 
굉장히 중요한 역할을 한다는 것을 확인 함. 
자바스크립트 커뮤니티에서 가장 중요한 라이브러리 중 하나인 
jQuery를 사용하는 방법도 살펴봄. 
-----------------------------------------------------------------
제목 
36 UI vs API 

UI = User Interface 
API = Application Programming Interface 

버튼을 누르면 나오는 경고창 

버튼을 누가 사용하고 있나요? 웹앱을 이용하는 사용자가 이런 버튼과 
같은 조작장치를 이용해 웹 애플케이션을 사용하고 있는 것. 
사용자가 시스템을 제어하기 위해 사용하는 조작장치를 UI라고 함. 

이번에 우리가 만든 웹 애플케이션 코드를 생각해 보자. 
여기에 있는 경고창은 우리가 만든 것일까?
우리가 만들기도 했고, 우리가 만들지 않기도 했음. 
생각해 보면 경고창이 실행되는 타이밍과 텍스트는 우리의 의도가 반영되기 
때문에 우리가 만든 것이라고도 볼수 있음. 
하지만, 
한 줄짜리 코드에는 경고창의 모양이나 기능이 일절 설명돼 있지 않음. 
그럼 이 경고창은 어떻게 만들어진 것일까?
이것은 웹 브라우저를 만든 사람들이 우리 대신 경고창의 기능을 미리 만들어 
놓았다가 우리가 alert() 를 실행하면 경고창을 띄워주겠다고 자바스크립트
의 사용 설명서를 통해 약속한 것임. 
그 약속을 믿고 alert()는 함수를 호출해서 경고창을 띄울 수 있게 되는 것임. 
경고창을 실행하는 조작장치. 
그런데
이 조작장치를 일반인이 사용하지는 않습니다. 일반인은 코딩을 하지 못한다고 가정하면 말이죠. 
우리가 만든 버튼을 클릭하면 경고창이 뜨는 애플케이션이 웹 브라우저가 이미 가지고 있는 
경고창 기능을 alert()라는 자바스크립트 문법에 따라 사용하고 있는 것입니다. 

이처럼 우리가 애플케이션을 만들기 위해 프로그래밍 할 때 
사용하는 조작장치를 애플케이션 프로그래밍 인터페이스라고 합니다. 

alert() 라는 것이 바로 애플케이션 프로그래밍 인터페이스(API) 인 것입니다. 
모든 프로그래밍 언어에 공통적으로 적용되는 이야기. 
모든 애플리케이션은 API를 프로그래밍적으로 , 다시 말해 순서대로 실행하는 방식으로 만들어짐. 
API가 없다면 순서가 무슨 소용 있을까요? 순서가 없다면 API 가 무슨 소용이 있을까요?
API와 순서는 단어와 문법처럼, 부품과 그 부품의 결합 방법처럼 서로 떼려야 뗄 수 없는 관계.

프로그래머가 되기전에 여러분은 UI 만 사용 했음. 
이제는 API도 사용하는 프로그래머가 된 것임. 
자바스크립트라는 접착제로 API를 결합해서 , 다시 말해 API를 응용해서 
세상에 누구도 만들어본 적이 없는 응용프로그램을 만들수 있게 됨. 

다음 시간에는 웹 브라우저는 어떤 API를 감추고 있는지 소개 하고 마침. 
---------------------------------------------------
제목 
37 수업을 마치며 

필요한 것은 공부보다는 실습. 
실습보다는 자신의 프로젝트를 시작. 
프로젝트시 주의사항 (저자의 충고)

모든 개념을 총동원하려 하지 마세요.
필수불가결한 최소한의 도구만으로 문제를 해결하려는 시도.
순서에 따라 실행돼야 하는 명령들이 실행되게 하고 
한계가 오면 반복문, 조건문, 함수, 객체를 도입하면서 활용
또 한계가 오면 실습을 멈추고 공부를 다시 시작.

도움이 될말한 검색어.

어떤 웹 페이지의 태그를 삭제하고 싶거나 어떤 태그의 자식 태그를 
추가하고 싶다면 -> 'document' 객체를 살펴보기. 
만약 없다면 -> DOM 객체로 수색범위를 넓히기.
document 객체는 DOM 의 일부이기 때문에.

웹 페이지가 아니라 웹 브라우저 자체를 제어한다면 
'window'객체를 살펴보기. 
현재 열려있는 웹 페이지의 주소 또는 새 창 열거나, 화면 크기를 
자바스크립트를 통해 알아야 한다면 window 객체에 속한 프로퍼티나 
메서드가 도움이 됨. 

웹 페이지를 리로드하지 않고도 정보를 변경하고 싶다면 
'Ajax'가 필요.
현대적인 웹 앱을 만드는데 필수적인 테크닉.

웹 페이지가 리로드돼도 현재 상태를 유지하고 싶다면 'cookie'를 배우기.

cookie와 함께라면 사용자를 위한 개인화된 서비스를 제공할 수 있음. 

인터넷이 끊겨도 동작하는 웹 페이지를 만들고 싶다면 
'offline web application' 찾아보기. 

화상 통신 웹 앱을 만들고 싶다면 -> webRTC

사용자의 음성을 인식하고 음성으로 정보를 전달하고 싶다면 'speech'로 시작하는 API 

3차원 그래픽으로 게임을 만들고 싶다면 'WebGL' 살펴보기. 

가상현실에 관심이 많다면 'WebVR'


















