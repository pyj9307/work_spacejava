CSS-정리1_작업중 0409
제목 
1 수업 소개 
웹 페이지를 좀 더 아름다우면서 보기 좋은 형태로 만드는 방법.
통계에 근거해서 공부하기.
------------------------------------------------------
제목 
2 CSS 가 등장하기 전의 상황

문서를 만들고 이후에 사람들의 많은 요청 사항.
글꼴을 변경 해주세요.
문자의 크기와 색생 변경.
가운데 정렬, 문서의 배경 이미지를 넣고 싶어요 등등. 

디자인과 관련된 새로운 태그를 추가하는 것
디자인에 최적화된 완전히 새로운 언어를 만드는 것. 
결론, CSS 라는 새로운 언어의 발전입니다. 

안쓰는 태그 소개 <font> 

앞에 WEB1 예제 사용. 

WEB, HTML, CSS , JavaScript 각 링크 글자색을 빨간색으로 변경 해보기. 

예제)
<!DOCTYPE html>
<html>
    <head>
        <title>WEB1 - WEB </title>
        <meta charset="utf-8">
    </head>
    <body>
        <h1><a href="index.html"><font color="red">WEB</font></a></h1>
    <ol>
        <li><a href="1.html"><font color="red">HTML</font></a></li>
        <li><a href="2.html"><font color="red">CSS</font></a></li>
        <li><a href="3.html"><font color="red">JavaScript</font></a></li>
    </ol>

    <h2>WEB이란 무엇인가?</h2>
    <p style="margin-top: 40px;">
        The World Wide Web (WWW), commonly known as the Web, is the world's dominant software platform.[1] It was originally a hypertext document management system[2] accessed over the Internet.[3]

        The resources of the Web are transferred via the Hypertext Transfer Protocol (HTTP), may be accessed by users by a software application called a web browser, and are published by a software application called a web server.
        
        Web resources may be any type of downloaded media, but web pages are hypertext documents formatted in Hypertext Markup Language (HTML). Special HTML syntax displays embedded hyperlinks with URLs, which permits users to navigate to other web resources. In addition to text, web pages may contain references to images, video, audio, and software components, which are either displayed or internally executed in the user's web browser to render pages or streams of multimedia conten
    </p>
    </body>
</html>

단점.
<a> , <h1> 태그는 무언가 설명하는 정보입니다. 그리고 검색 엔진들이 필요한 정보로 사용합니다. 
하지만, <font>는 어떠한 정보도 가지고 있지 않고, 단지 색깔만 변경됨. 

다른 문제.
극단적으로 <a> 태그가 1억개이고, 색깔 변경 요청이 매번 들어오면 처리하기가 곤란함. 
--------------------------------------------------------------------
제목 
3 css의 등장 

앞에서 사용한 <font>를 사용한 코드는 주석 처리. 
드래그해서 ctrl + '/' 사용. 
<!-- 와 --> 두 기호 사이의 콘텐츠는 없는 셈 친다. 

웹 브라우저에게 CSS 코드를 사용할 테니 HTML이 아니라 CSS 문법에 따라 해석해야 해라고 
HTML 문법으로 이야기 하기. 

<style>이라는 태그는 HTML의 문법이면서, 동시에 <style> 태그의 안쪽에 있는 내용은 
CSS이므로 CSS의 언어의 문법에 맞게 처리해야 한다는 의미를 지니고 있음. 

웹 페이지의 모든 <a> 태그의 폰트 색상을 빨간색으로 변경하기. 
지금 문법이 가장 중요함. 

예시)
<style>
	a {
		color: red;
	}
</style>

ctrl + s 저장 해보면: 웹브라우저에서 결과화면 확인.

기존 HTML 태그 추가 보다, 새로운 문법을 익혀야하는 부담은 있지만, 
효과가 크다.

만약, <font> 태그로 검정색으로 변경하려면, 1억개 있으면, 1억개 다 바꿔야 함. 
이건, 극단적인 예입니다. 
하지만, css로 하면 color:black; 으로 하나만 변경 하면 됩니다. 

코딩을 어떻게 할까? -> 중복의 제거.

css 장점. 유지보수를 편리하게 할수 있고, 가독성도 훨씬 더 높아진다.
HTML 과 디자인을 분리해서 분업화 할수 있습니다. 
---------------------------------------------------------------
4 css의 기본 문법 

<style> 태그가 아닌, 속성을 이용하는 방법 
현재 CSS 링크를 클릭하고 해당하는 페이지에 현재 머물고 있다라는 것을 
알긴 어렵습니다. 
그래서, 현재 페이지에 해당하는 곳을 알리기 위해 'CSS'란 텍스트를 빨간색으로 표시하고 싶음. 
예시)
   <li><a href="2.html" style="color: red;">CSS</a></li>

일단, css 글자가 빨간색이 됩니다. 
style="" 은 HTML의 속성입니다. 

2가지 방법. 
1) <style> 태그 쓰기.
<style>
	a {
		color: red;
	}
</style>

2) style 속성을 쓴다. 
   <li><a href="2.html" style="color: red;">CSS</a></li>


링크에 밑줄이 보기 싫어서 없애 보기. 

<style>
	a {
		color: black;
		text-decoration: none;
	}
</style>

css 만 밑줄긋기
<li><a href="2.html" style="color: red; text-decoration:underline">CSS</a></li>

하나의 선택자에 대해 여러 개의 효과를 지정할 수 있는데 그 경우에는 세미콜론으로 구분한다는 
기본적인이고, 중요한 문법을 살펴봤습니다. 
------------------------------------------------------------
제목 
5 혁명적 변화 

<style>
	a {
		color: black;
		
	}
</style>

a -> 선택자, Selector 
이 웹 페이지의 모든 a 태그를 선택한다는 점에서 선택자. 

color:red; -> 선언, 효과 Declaration 
지정한 태그에 어떠한 효과를 줄것인가. 

color : 속성, Property 
red : 값, Value 
기초적인 부분을 알면, 이제 다양한 선택자와 속성 값을 알아가면 됩니다. 
------------------------------------------------------------------
제목 
6 CSS 속성을 스스로 알아내기 

WEB이란 제목을 좀 더 크고, 가운데 정렬로

검색: css text size property
예제)
<h1> 태그를 style에 추가하기. 

<style>
	a {
		color: black;
		text-decoration: none;
	}

	h1 {
		font-size: 45px;
	}
</style>

나머지 속성 값은 나중에 보기. 
px는 컴퓨터에서 사용하는 단위입니다. 

가운데 정렬 검색 해보니.
검색: css text center property

예제)
<style>
	a {
		color: black;
		text-decoration: none;
	}

	h1 {
		font-size: 45px;
		text-align: center;
	}
</style>

필요한 프로퍼티는 검색을 하면 되므로 다 외울 필요가 없습니다. 
text-a 까지만 입력을 하면 프로퍼티의 값을 추천 해줌. 

---------------------------------------------------------------------
제목 
7 css 선택자의 기본 

CSS를 지배하는 두가지 중요한 토대.
1) 효과
2) 선택자 

앞에는 효과에 대한 토대를 닦았고, 이번 시간에는 선택자에 대한
중요한 토대를 닦는 시간.

예제를 변경해가며 선택자를 하나하나 설명하겠습니다.
앞에 예제를 활용.
먼저, css 링크에 있는 인라인으로 적용돼 있는 
style 속성의 내용을 없애기.

예)2.html 

변경 전
 <li><a href="2.html" style="color: red; text-decoration:underline">CSS</a></li>
변경 후 
<li><a href="2.html">CSS</a></li>
각 링크마다 글자색이 검정색으로 변경. 

<head>
	<title>WEB1 - CSS </title>
	<meta charset="utf-8">

	<style>
		a {
			color : black;
			text-decoration: none;
		}
	</style>
</head>

글자 색도 지우기. 
<style>
	a {
		text-decoration: none;
	}
</style>

color : black; -> 이 부분을 삭제.

파란색 : 아직 미방문.
보라색 : 한 번 방문 했음. 

이렇게 변경 해보기. 
모든 링크는 기본적으로 검정색으로
사용자가 방문했던 "HTML"과 "CSS" 링크는 회색으로 바꾸고
현재 사용자가 머물고 있는 "CSS"라는 페이지의 링크는 
현재 방문하고 있다는 뜻에서 빨간색으로 표시.

1) 이 웹 페이지의 모든 <a> 태그를 검은색으로 지정. 

<style>
	a {
		color : black;
		text-decoration: none;
	}
</style>

새로고침 후 변경됨

현재 머물고 있는 페이지는 "CSS"입니다. 
"CSS" 페이지 이전에 있었던, "HTML"과"CSS"를 
회색으로 처리해서 사용자에게 정보를 주고 싶습니다. 
지금까지 배운 바로는 style 인라인 속성을 통해 처리했음. 

예) 
<li><a href="2.html" style="color: red;">CSS</a></li>

이렇게 하면, 중복이 발생합니다. 
먼저, 중복된 코드를 없애기.
그리고,
HTML 과 CSS 라는 두 텍스트를 같은 그룹으로 묶고,
그 그룹에 대해서 폰트 색상을 회색으로 지정합니다. 
class 라는 HTML 속성을 지정하면 됩니다. 
속성 값을 보았다란 뜻의 saw 지정합니다. 
주의 사항 saw 앞에 점 찍기.

ex) 태그에 class 속성 지정. 

<li><a href="1.html" class="saw">HTML</a></li>
<li><a href="2.html" class="saw">CSS</a></li

class=""는 HTML 입니다. "saw"라는 부분도 HTML 입니다. 
여기엔 CSS가 들어가지 않습니다. 즉, "saw"라는 class 값을 가지고
있는 태그 2개를 만들었는데, 
우리가 하고 싶은 것은 이 웹 페이지의 모든 태그 중에서 "saw" 라는 
class 값을 갖고 있는 모든 태그에 대해 폰트 색상을 'gray' 로 
지정하는 것입니다. 

saw 라는 class 값을 가진 태그의 글자색 변경. 
<style>
	a {
		text-decoration: none;
	}

	h1 {
		font-size: 45px;
		text-align: center;
	}

	.saw {
		color: gray;
	}
</style>

여기서 주의 사항은 class 앞에 (.) 점을 붙여야 합니다. 
클래스란 말에는 그루핑하다. 하나로 묶다. 학교 반을 클래스라고 함을 생각. 
점클.

다음으로 'CSS' 링크, 즉 현재 머물고 있는 페이지의 링크를 빨간색으로 표시하기위해 
active 클래스를 추가하고 active 선택자에 폰트 색상을 빨간색으로 지정하면 됩니다. 

<style>
	a {
		color : black;
		text-decoration: none;
	}

	.saw {
		color: gray;
	}

	.active {
		color: red;
	}
</style>

이 부분 주목 해보기.
<li><a href="2.html" class="saw active">CSS</a></li>
class라고 하는 속성의 값은 여러 개의 값이 올 수 있고, 띄어쓰기로 구분한다는 것. 
하나의 태그에는 여러 가지 속성이 들어갈 수 있고, 
여러 개의 선택자를 통해 하나의 태그를 공동으로 제어 할 수 있다는 사실을 알수 있습니다.
하지만, 이 방법은 좋은 방법이 아닙니다. 
왜냐하면, <a> 태그는 두 개의 클래스에 영향을 받고 있기 때문입니다. 
그런데, 왜 빨간색으로 된걸까요?
순서 때문입니다
CSS 코드 안에서 .active 가 .saw 보다 나중에 (아래에 추가해서 나중에) 
등장했기 때문입니다
그러면, 위에 클래스 위치를 위 아래 바꿔 보겠습니다. 

.active {
	color: red;
}

.saw {
	color: gray;
}
결과화면 
CSS 글자가 빨간색이 아닌 회색으로 됩니다. 
아래에 있을수록 우선순위가 높습니다. 

좀 더 우선순위가 높은 것을 사용할 필요가 있습니다.
그것은 ID 선택자입니다. 
앞의 CSS 코드에서 active를 ID 선택자로 옮기면 됩니다. 

active를 ID 선택자로 옮기기. 

<li><a href="2.html" class="saw" id=active>CSS</a></li>

이제 이 웹 페이지에서 id 값이 'active'인 값을 선택하는 것입니다.

.active -> #active 로 변경. 

그러면, .saw 가 #active 보다 뒤에 등장했음에도 페이지를 
새로고침할 경우 'CSS'글자의 색이 빤간색이 됩니다. 
순서를 
#active {
	color: red;
}
.saw {
	color: gray;
}
a {
	color : black;
	text-decoration: none;
}
태그 선택자 'a'를 맨 밑에 해도 결과는 아이디 선택자가 우선됨.
그래서, 우선순위는 id 선택자 > 클래스 선택자 > 태그 선택자 

id 선택자의 값인 active 인 태그가 이 웹 페이지에서는 단 한 번만 등장해야 합니다. 
여러 번 써도 동작은 하지만 쓰지 말라고 권장하고 있습니다. 
'중복돼서는 안 된다'입니다. 
모든<a> 태그를 가리키는 선택자와 이 웹 페이지에서 id 값이 'active'를 가리키는 
선택자 중에서 무엇이 더 포괄적이고 무엇이 더 구체적인가요?

태그 선택자가 id 선택자보다 훨씬 더 포괄적입니다.
그래서, css를 만든 사람들은 좀 더 구체적인 것의 우선순위를 포괄적인 것보다 
높였습니다. 그래야 태그 선택자를 통해 전체적인 태그 디자인을 해내고,
그중에서 예외적인 것에 id 값을 부여하는 것이 디자인하고 코딩하는 데 효율적이기 때문입니다.
태그 선택자와 id 선택자 사이에 중간 정도의 class 선택자가 있습니다.

class 선택자는 태그 선택자보다 우선순위가 높지만 id 선택자보다 우선순위가 낮습니다.

검색 : css selector 
https://www.w3schools.com/cssref/css_selectors.asp
element 부분을 보면, 'p'라고만 쓰면 element, 즉 태그 선택자와 같습니다. 
모든 <p> 태그를 선택한다는 내용이 나옵니다. 
id 선택자의 설명을 보면 'id' 값이 'firstname' 인 값을 선택한다라고 돼 있습니다. 
'.' 점이 붙어 있다면 클래스 선택자입니다. 

---------------------------------------------------------------------
제목
8 박스 모델
앞에서 CSS의 매우 중요한 개념들을 배웠으니 HTML 수업에서 가져온 웹 사이트 예제에 디자인을 
적용하는 작업을 진행하겠습니다.
제 수업은 디자인 수업이 아니라서 아름답진 않을 겁니다. 

제목 태그는 상단에 표시되고, 그 밑에는 수평으로 선이 있을 테고, 글 목록 오른쪽에도 
선 형태의 간단한 디자인.
필요한 개념 -> 박스 모델 
앞에서 배운 선택자나 속성만큼 중요하지 않지만 상당히 중요한 개념.
설명을 위해 
새로운 파일 -> box.html
CSS 와 관련된 내용을 넣고, CSS 를 <h1> 태그로 감싸기

box.html 파일 생성
예제 소스
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Box</title>
</head>
<body>
  <h1>CSS</h1> Cascading Style Sheets (CSS)  is a style sheet language used for describing the presentation of a document written in a markup language such as HTML.
</body>
</html>

결과 화면 보기.
<h1> 태그가 화면 전체를 쓰고 있음.
Cascading Style Sheets (CSS)의 ‘CSS’ 부분에 링크 걸기.
href 값으로 위키피디아의 CSS 페이지를 넣겠습니다. 

CSS 부분에 링크 만들기 

<body>
  <h1>CSS</h1> Cascading Style Sheets (<a href="https://en.wikipedia.org/wiki/CSS">(CSS)</a>  is a style sheet language used for describing the presentation of a document written in a markup language such as HTML.
</body>

<h1>이라는 태그는 화면 전체를 쓰고 있습니다.
줄바꿈이 돼 버렸기 때문입니다. 
<a>태그는 똑같은 태그임에도 줄바꿈되지 않고 다른 콘텐츠와 같은 라인에
위치합니다. 
그것은 <h1> 태그는 제목 태그인데 제목 태그는 화면 전체를 쓰는 것이 기본적으로 더 
편리하기 때문입니다. 
링크가 화면 전체를 쓴다면 링크 앞 뒤의 콘텐츠가 줄바꿈되는 경우 상당히 불편하기 때문에 
기본적으로 링크는 줄바꿈하지 않고, 콘텐츠 크기만큼만 쓴다는 사실을 짐작 할수 있습니다.
짐작이 아닌 분명히 시각적으로 보는 방법이 있습니다.
예) 투명인간 사람의 부피를 알기 위한 방법. -> 페인트 뿌리기.
<h1> 태그와 <a> 태그의 테두리를 그리면 이것들의 부피감을 알 수 있습니다. 

<h1> 태그와 <a> 태그에 테두리 그리기

 <style>
    h1 {
      border-width: 5px;
      border-color: red;
      border-style: solid;
    }
    a {
      border-width: 5px;
      border-color: red;
      border-style: solid;
    }
  </style>

이 웹 페이지의 모든 <h1> 태그에 대해 코드를 작성.
테두리는 영어로 border 입니다. 
border 에서 테두리의 두께는 border-width 이고 여기서는 5px로 지정.
테두리의 두께만으로 부족. 테두리의 색상을 지정합니다. 
border-color를 red 로 지정했음. 
테두리의 스타일. 즉 점선인지 실선인지 지정. 
단선인 경우 border-style: solid; 지정. 
 
새로고침 결과 확인.
<h1> 태그가 화면 전체를 쓴다는 사실 알수 있음. 
<h1> 대신에 <a> 태그로 내용 복사해서 그대로 적용해보면. 
<a> 태그가 화면 전체를 쓰지 않고, 자기 자신의 콘텐츠 크기 만큼의 부피를 쓴다는 것
알수 있음. 

HTML에 있는 여러 태그들은 태그의 성격과 일반적인 쓰임에 따라 화면 전체를 쓰는 것이 
편한 것과 자신의 크기만큼의 부피를 갖는게 편한 것이 있기 때문에 화면 전체를 쓰는 태그가
있고, 자기 크기 만큼 쓰는 것들이 있습니다. 

화면 전체를 쓰는 태그들을 블록 레벨 엘리먼트, 
자기 자신의 콘텐츠 크기만큼 쓰는 태그들을 인라인 엘리먼트라고 합니다. 
용어는 중요하지 않습니다. 다만 어떤 태그들이 화면 전체를 쓰고, 어떤 태그는 부분을 쓴다는 것을 
이해하는 것이 중요합니다. 
그리고, 블록 레벨 엘리먼트라 하더라도 인라인 엘리먼트처럼 자신의 부피 만큼 쓰게 할 수 있습니다. 
다음과 같이 display 라는 속성을 이용하면 됩니다. 

예)
display : inline; 

display : block; -> 지정하면 블록 레벨 엘리먼트가 됩니다. 

블록 레벨 엘리먼트와 인라인 엘리먼트는 display 라는 속성의 기본값일 뿐, 
그 기본값은 CSS를 통해 언제든 바꿀수 있다는 사실을 기억해 두시면 됩니다. 

태그를 안보이게 할수 있습니다. 

      display: none;

중복이 등장.
h1 과 a 내용이 중복됨.
중복을 없애는 탁월한 방법.
수정하고 페이지 고침. -> 결과가 같다.

코드의 중복 제거 

예)
<style>
    h1 , a {
      border-width: 5px;
      border-color: red;
      border-style: solid;
    }
    
  </style>

즉, 선택자에서 ‘,’ 라는 선택자를 통해 코드의 양을 획기적으로 줄일 수 있음. 
잘 보면 여전히 중복이 존재.
바로 -> border- 부분 
CSS 를 만든 사람들은 해당 코드를 전부 타이핑하기가 너무 귀찮아서 다음과 
같이 작성할 수 있게 만들어 뒀습니다. 

코드의 중복 제거2
 <style>
    h1 , a {
      border : 5px solid red;
    }
    
  </style>

결과는 똑같음. 
이 때, 5px, solid, red 순서는 중요하지 않음. 

실제 박스 모델 

css 하나만 남기기. 

box.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Box</title>
  <style>
    h1  {
      border : 5px solid red;
    }
    
  </style>
</head>
<body>
  <h1>CSS</h1> 
</body>
</html>

CSS를 선택해 보면 CSS의 콘텐츠와 테두리는 간격이 없고 여백이 없음. 
이 때 콘텐츠와 테두리 사이의 여백을 주고 싶다면 다음과 같이 padding 값을 주면 됨. 

콘텐츠와 테두리 사이에 여백 추가하기 

<style>
    h1  {
      border : 5px solid red;
      padding: 20px;
    }
    
  </style>
콘텐츠와 테두리 사이의 간격이 생김.

여기에   <h1>CSS</h1>  하나 더 추가.
<body>
  <h1>CSS</h1> 
  <h1>CSS</h1> 
</body>

테두리와 테두리 사이의 간격이 생기는데, 
이 간격이 바로 margin 때문. 

다음 코드를 추가하면 테두리와 테두리 사이에 간격이 없어짐. 

margin 속성 지정. 


<style>
    h1  {
      border : 5px solid red;
      padding: 20px;
      margin: 0;
    }
    
  </style>

다음처럼 변경하면, 20px 만큼 간격이 생김. 

<style>
    h1  {
      border : 5px solid red;
      padding: 20px;
      margin: 20px;
    }
    
  </style>

결과 확인. 

<h1> 이라는 태그는 박스 모델상 display:block; 이 생략돼 있는 상태이며 화면 
전체를 쓰고 있습니다. 
바꾸기 위해 
width : 100px 으로 지정하면 100px 만큼 태그의 크기가 변경됨. 

width 속성 지정 

<style>
    h1  {
      border : 5px solid red;
      padding: 20px;
      margin: 20px;
      display: block;
      width: 100px;
    }
  </style>

여기까지 이해하고 나면 박스 모델에 대해 모두 이해하신 겁니다. 
padding, margin이 헷갈릴 수 있습니다. 
검색어 : css box model 

그림을 보면 
중간에 content, border가 있고 border를 기준으로 안쪽은 padding, 바깥쪽은 
margin 임을 알수 있음. 

이번에는 웹 페이지에서 ‘css’ 텍스트를 대상으로 마우스 오른쪽 버튼을 클릭하면 나오는 
‘검사’라는 항목을 클릭. 

<h1> 태그를 선택 했을 때 Styles 라는 부분은 <h1> 태그가 어떤 css 스타일의 영향을 받고 
있는지를 일목요연하게 보여주는 굉장히 중요한 기능입니다. 
이러한 기능을 사용하지 않으면 HTML 과 CSS 코드가 복잡해졌을 때 어떤 태그가 어떠한 
CSS의 영향을 받는지 파악하기가 굉장히 곤란.
이런 도구를 사용하는게 중요함. 

개발자 도구 사각형 그림에서 
padding, border, margin 영역을 보기. 

정리.
HTML 의 태그들은 그 태그의 기본적인 성격에 따라 화면 전체를 쓰기도하고 
자기 크기만큼을 쓰기도 합니다. 
화면 전체 -> 블록 레벨 엘리먼트
자기 자신의 크기만 -> 인라인 엘리먼트
폭 : width 
높이 : height 
콘텐츠와 테두리 사이의 간격은 : padding 
테두리와 테두리 사이의 간격 : margin 
이것을 css 박스 모델, 부피감을 결정한다는 것은 디자인의 핵심적인 요소라는 것을 알수 있음. 
박스 모델이라는 개념을 활용해 HTML 수업에서 가져온 예제의 
디자인을 개선하는 작업을 진행 해보자.

—————————————
제목
09 박스 모델 써먹기.

2.html을 바탕으로 디자인 

디자인 계획안처럼 밑줄을 긋기 위해서는 어떻게 할까?
밑줄을 긋기 위해서는 테두리를 사용하면 되며, 
그 테두리는 <h1>WEB</h1> 태그에 주면 됩니다. 
지금 필요한 것은 아래쪽 테두리. 
border -> border-bottom 

<h1> 태그에 아래쪽 테두리 만들기 

<style>
    h1 {
        font-size: 45px;
        text-align: center;
        border-bottom: 1px solid gray;
    }
</style>

위쪽은 넓고, 아래쪽은 좁음.
조정하기 -> padding 조정. 
개발자도구 열기 

<h1> 태그를 선택했을 때의 색상을 보면 바깥쪽의 황토색은 무엇 때문에 이렇게 되는가?
바로 -> margin 값 때문. 

margin 값 없애기 

<h1> 태그의 margin 값 제거 

<style>
    h1 {
        font-size: 45px;
        text-align: center;
        border-bottom: 1px solid gray;
        margin: 0;
    }
</style>

web 상단 공간이 없어짐. 

테두리와 web 이라는 텍스트가 너무 달라 붙음. 

padding 값 지정. 
20px 정도. 

위에 상단 공간 여백이 20 px 만큼 생김

세로 줄 긋는 과정. 

<ol> 태그. -> border-right: 1px solid gray;
지정하고 새로 고침.

<ol> 태그 오른쪽에 테두리 만들기

ol {
        border-right: 1px solid gray;
    }
세로 줄이 오른쪽 벽에 붙음. 

ol 태그 -> 화면 전체를 쓰는 블록 레벨 엘리먼트.
변경 방법 -> width 값 지정. -> 100px.

<ol> 태그의 너비 지정. 

  ol {
        border-right: 1px solid gray;
        width: 100px;
    }

테두리 사이의 여백, 또 테두리와 화면 전체의 여백이 왜 생기는지 확인. 

ol 태그에 margin 값이 있기 때문. 
ol 태그의 margin 값 없애기 .

결과화면
왼쪽 1.HTML 위 공간이 없어짐. 

너무 붙어서 -> padding 값 지정. ->20px

ol {
        border-right: 1px solid gray;
        width: 100px;
        margin: 0;
        padding: 20px;
    }

결과 화면 
위쪽, 오른쪽 20px 공간만큼 생김. 

개발자 도구 -> 오른쫀 상단 사각형 마우스 커서 눌러서 리스트쪽 커서 가져다 놓아 보면 
콘텐츠 박스 , 연두 패딩 박스등을 확인하고, 수치로도 확인 가능. 

상단 테두리 여백 있음 왜? body 태그에 margin 값이 있어서. 
-> 0 으로 조정. 

결과화면 
화면 전체를 꽉 채우는 선이 완성.

css의 정보를 위로 올리는 작업. 
—————————————————————————
제목 
10 그리드 소개 
기획서 -> 목록과 본문이 나란히 위치하는 디자인 
CSS 본문을 위로 올리는 최신 방법. 
그리드 (Grid)
정보의 레이아웃을 잘 짜는 방법을 코드를 통해 효율적으로 하는 것에 대해 
어려움을 겪었음. 
시행착오 끝에 플렉스 박스(Flexbox) 도 등장하고, 궁극의 방법인 그리드에 도착. 
먼저, 파일 하나 만들기.
grid.html
두 단어 비교해보기

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title></title>
</head>
<body>
  NAVIGATION ARTICLE
</body>
</html>

각 단어에 테두리를 주고 나란히 배치.
  NAVIGATION ARTICLE을 각각 태그로 묶기.
디자인이란 목적을 위해 어떤 의미도 없는 태그를 사용해야 할 때가 있는데,
그럴 때 사용하는 무색 무취와 같은 태그가바로 -> <div>
division의 약자. 

<div> 태그로 묶기

<body>
  <div>NAVIGATION</div> 
  <div>ARTICLE</div>
</body>

<div> 태그는 기본적으로 블록 레벨 엘리먼트이기 때문에
화면 전체를 쓰므로 줄바꿈이 됩니다. 
<div>  태그와 똑같은 목적 -> <span>

그런데 <span> 태그는 인라인 엘리먼트.

그리드 알아보기 위해서는 부피감을 확실히 알아야 할 필요가 있다. 
<style> 태그로 모든 <div> 태그에 border:5px solid gray; 지정. 

부피감을 확인하기 위해 <div> 태그에 테두리 지정. 
<style>
    div {
      border: 5px solid gray;
    }
</style>

두 개의 NAVIGATION 과 ARTICLE 요소를 나란히 놓기 위해 그리드 사용.
두개의 태그를 감싸는 부모가 필요.

두개의 <div> 태그를 감싸는 부모 태그 추가 

부모 태그의 id 값을 'grid'로 지정. 
이 웹 페이지에서 id 값이 grid인 태그에 대해 테두리를 분홍색으로 설정.

부모 태그의 id 값 설정, 테두리를 분홍색으로 변경 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title></title>
  <style>
    #grid {
      border: 5px solid pink;
    }
    div {
      border: 5px solid gray;
    }
  </style>
</head>
<body>
  <div id="grid">
  <div>NAVIGATION</div> 
  <div>ARTICLE</div>
</div>
</body>
</html>

좀 더 잘 구분 두개의 태그를 나란히 배치하고 싶으면 그것을 감싸는 
부모 태그가 필요. 
즉, 디자인 목적만으로 <div id="grid">가 필요.
display -> 속성값으로 block, inline, none 을 지정해 
어떤 태그가 표시되는 방법을 완전히 바꾸는 속성이었엄. 
그런데, display의 속성에 'grid' 라는 속성을 쓰면 아무 변화 없음. 
하지만, 
grid-template-columns 속성을 추가한 다음 첫 번째 칼럼은 150px 정도의 부피를 갖고,
두 번째 칼럼은 나머지 공간을 다 쓴다는 의미로 1fr을 지정. 

두 개의 태그를 나란히 배치하기. 

 <style>
    #grid {
      border: 5px solid pink;
      display: grid;
      grid-template-columns: 150px 1fr;
    }
    div {
      border: 5px solid gray;
    }
  </style>

화면을 늘려보면 ARTICLE 영역은 자동으로 커지고 
NAVIGATION 영역은 150px 을 고정적으로 차지.
여기서 1fr이 무엇인지 확인 해보기. 
150px 대신 1fr 로 하면 두 칼럼은 같은 크기가 됨. 

      grid-template-columns: 1fr 1fr;

그리고 첫 번째 칼럼을 2fr로 바꾸면 화면 전체를 3fr이라고 했을 때, 
NAVIGATION 영역은 2만큼, ARTICLE 영역은 1만큼 화면 전체를 나눠서 쓰게 됨. 

grid-template-columns: 2fr 1fr;

다시, NAVIGATION 영역은 150px, ARTICLE 영역은 1fr을 사용하도록 수정. 
이번에는 
ARTICLE 대신 의미 없는 텍스트를 넣어보자.

ARTICLE 영역에 의미 없는 텍스트 넣기 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title></title>
  <style>
    #grid {
      border: 5px solid pink;
      display: grid;
      grid-template-columns: 150px 1fr;
    }
    div {
      border: 5px solid gray;
    }
  </style>
</head>
<body>
  <div id="grid">
  <div>NAVIGATION</div> 
  <div>Navigation[1] is a field of study that focuses on the process of monitoring and controlling the movement of a craft or vehicle from one place to another.[2] The field of navigation includes four general categories: land navigation, marine navigation, aeronautic navigation, and space navigation.[1]

    It is also the term of art used for the specialized knowledge used by navigators to perform navigation tasks. All navigational techniques involve locating the navigator's position compared to known locations or patterns.
    
    Navigation, in a broader sense, can refer to any skill or study that involves the determination of position and direction.[1] In this sense, navigation includes orienteering and pedestrian navigation.[1]</div>
</div>
</body>
</html>

텍스트가 많아짐에 따라 자동으로 칼럼이 커지고 왼쪽에 있는 NAVIGATION을 감싸는 태그도 자동으로 
커지는 모습을 볼수 있음. 이것이 그리드. 아주 최신 기술.
이러한 최신 CSS 기능을 사용하려면 현재 환경에서 사용할 수 있는지 데이터에 근거해서 판단 필요. 

사이트 소개 
Can I Use 
https://caniuse.com 

크롬 57 버전에서 부터 초록 표시. 
익스플로러 10,11 부분 지원. 
모든 사용자들 약 93% 

그리드 어떻게 쓰는지 알아봄. 
우리 웹 사이트에 그리드를 적용해 레이아웃을 완성 
--------------------------------------------
제목 
11 그리드 써먹기

실제로 써먹기 
2.html 가기. 

나란히 놓고 싶은 대상은 <ol> 태그와 <h2>, <p> 태그. 
<h2> 태그와 <p> 태그를 묶기. 
의미도 없고 기능도 없는 <div> 태그를 사용.

<h2> 태그와 <p> 태그를 먼저 <div> 태그로 묶기. 

<div> 태그와 <ol> 태그 두개가 남는데, 이 두개를 하나의 그룹으로 묶어서 
그리드에 포함되는 하나의 요소로 사용하려면 역시나 이 두개를 감싸는 공통의 부모 태그가 필요.
역시나 이번에도 <div> 태그를 사용함. 

바깥쪽의 <div> 태그를 그리드로 지정하기 위해 id 값으로 grid를 지정. 
그리고 id 가 grid 인 태그에 대해 display 를 grid로 지정하고, 
그 다음에 grid-template-columns에서 첫 번째 칼럼인 <ol>은 150px로 설정하고, 
두 번째 칼럼인 <div> 태그에 대해서는 1fr로 지정. 

코드 
<!DOCTYPE html>
<html>
    <head>
        <title>WEB1 - CSS
        </title>
        <meta charset="utf-8">
        <!-- Global site tag (gtag.js) - Google Analytics -->
        <script
            async="async"
            src="https://www.googletagmanager.com/gtag/js?id=G-GYYC1R86H9"></script>
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag() {
                dataLayer.push(arguments);
            }
            gtag('js', new Date());

            gtag('config', 'G-GYYC1R86H9');
        </script>
        <style>
            #grid {
                display: grid;
                grid-template-columns: 150px 1fr;
            }
            h1 {
                font-size: 45px;
                text-align: center;
                border-bottom: 1px solid gray;
                margin: 0;
                padding: 20px;
            }

            ol {
                border-right: 1px solid gray;
                width: 100px;
                margin: 0;
                padding: 20px;
            }
            body {
                margin: 0;
            }
        </style>
    </head>
    <body>
        <h1>
            <a href="index.html">WEB</a>
        </h1>
        <div id="grid">
            <ol>
                <li>
                    <a href="1.html">HTML</a>
                </li>
                <li>
                    <a href="2.html">CSS</a>
                </li>
                <li>
                    <a href="3.html">JavaScript</a>
                </li>
            </ol>
            <div>
                <h2>CSS란 무엇인가?</h2>
                <p style="margin-top: 40px;">
                    Cascading Style Sheets (CSS) is a style sheet language used for describing the
                    presentation of a document written in a markup language such as HTML.[1] CSS is
                    a cornerstone technology of the World Wide Web, alongside HTML and
                    JavaScript.[2] CSS is designed to enable the separation of presentation and
                    content, including layout, colors, and fonts.[3] This separation can improve
                    content accessibility; provide more flexibility and control in the specification
                    of presentation characteristics; enable multiple web pages to share formatting
                    by specifying the relevant CSS in a separate .css file, which reduces complexity
                    and repetition in the structural content
                </p>
            </div>
        </div>
    </body>
</html>

웹 페이지가 멋진 모습이 됨. 조금씩 디테일을 다듬어 봄. 
글 목록 부분의 여백을 보자. 

초록색으로 표시된 부분 때문에 현재의 모습을 함. 
즉, <ol> 태그의 padding  값이 20px로 설정돼 있어서 
이런 형태를 갖추고 있는데 이 숫자를 더블클릭해서 값을 조정할 수 있음. 
여기서 적당히 33px로 설정. 
<ol> 태그에 대해 padding-left 를 33px로 설정. 

왼쪽에 padding 이 생기니 글이 밀리는 현상을 볼수 있음. 
해당 영역을 조정하기 위해 <div>에 id 값으로 article 을 지정하고, 
#article에 대해 padding 값을 25px 정도로 설정. 

<div>에 id를 지정하고, padding 설정. 



페이지 새로 고침 하면, css 내용 박스가 왼쪽에서 공간이 생김. 

글목록에 회색으로 표시되는 것은 불필요해 보이므로 .saw 부분 삭제. 
#active도 삭제 
<ol> 선택자 코드도 좋은 모습이 아님. 
왜냐하면 <ol>이 내비게이션 역할로 쓰이고 있는데, 나중에 <ol>이 내비게이션이 아니라 
본문에 리스트로 포함될 수 있는데, 이런 경우 문제. 
이 예제에서는 id 값이 'grid' 인 태그 밑에 있는 <ol> 태그라고 지정하면 훨씬 더 의미가 분명 해짐. 

1 .saw 영역 지우기 
2 #active 영역 지우기 
3 ol 태그 선택자 ol 을 grid 태그 밑에 있는 ol 태그 선택자로 변경하기 

코드 정리하기. 

<!DOCTYPE html>
<html>
    <head>
        <title>WEB1 - CSS
        </title>
        <meta charset="utf-8">
        <!-- Global site tag (gtag.js) - Google Analytics -->
        <script
            async="async"
            src="https://www.googletagmanager.com/gtag/js?id=G-GYYC1R86H9"></script>
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag() {
                dataLayer.push(arguments);
            }
            gtag('js', new Date());

            gtag('config', 'G-GYYC1R86H9');
        </script>
        <style>
            body {
                margin: 0;
            }
            #grid {
                display: grid;
                grid-template-columns: 150px 1fr;
            }
            h1 {
                font-size: 45px;
                text-align: center;
                border-bottom: 1px solid gray;
                margin: 0;
                padding: 20px;
            }

            #grid ol {
                border-right: 1px solid gray;
                width: 100px;
                margin: 0;
                padding: 20px;
            }
            
            #article {
                padding-left: 25px;
            }
        </style>
    </head>
    <body>
        <h1>
            <a href="index.html">WEB</a>
        </h1>
        <div id="grid">
            <ol>
                <li>
                    <a href="1.html">HTML</a>
                </li>
                <li>
                    <a href="2.html">CSS</a>
                </li>
                <li>
                    <a href="3.html">JavaScript</a>
                </li>
            </ol>
            <div id="article">
                <h2>CSS란 무엇인가?</h2>
                <p style="margin-top: 40px;">
                    Cascading Style Sheets (CSS) is a style sheet language used for describing the
                    presentation of a document written in a markup language such as HTML.[1] CSS is
                    a cornerstone technology of the World Wide Web, alongside HTML and
                    JavaScript.[2] CSS is designed to enable the separation of presentation and
                    content, including layout, colors, and fonts.[3] This separation can improve
                    content accessibility; provide more flexibility and control in the specification
                    of presentation characteristics; enable multiple web pages to share formatting
                    by specifying the relevant CSS in a separate .css file, which reduces complexity
                    and repetition in the structural content
                </p>
            </div>
        </div>
    </body>
</html>

이렇게 하면 이 <ol>은 이 웹 페이지에 있는 모든 <ol> 중에서 부모가 'grid'인 태그를 선택하는 
선택자가 됨. 
이를 통해 선택자 중 하나를 알게 됨. 
그리고 #article을 #grid에 묶을 수 있겠지만 id 값으로 "article"을 썼기 때문에 
궅이 묶을 필요는 없습니다.
하지만, 의미를 분명히 하기 위해 묶는 것도 좋은 방법입니다. 
-----------------------------------------------
제목 
12 미디어 쿼리 소개 

현대적인 웹 애플리케이션을 만들 때 굉장히 중요한 요소라 할 수 있는 반응형 디자인 흐름 알아보자. 
예제에 약간의 코드를 더해 기능을 새로 추가함. 
화면이 작아짐에 따라 선이 없어지고 위치가 조금 달라짐. 
화면이 일정한 크기가 되면 선이 생기고 화면이 바뀌는 것을 알 수 있음. 
즉, 화면 크기에 따라 웹 페이지의 각 요소들이 반응해서 최적화된 모양으로 바뀌는 것을 
반응형 웹 또는 반응형 웹 디자인, 영어로는 
'responsive web' 이라 함. 

오랜 시간 웹을 위해 헌신한 사람들이 다양한 환경에서 적응할 수 있는 기술들을 발전시킨 
끝에 오늘날 반응형 디자인이라는 하는 최신 흐름까지 나타나게 됐음. 

반응형 디자인이란 화면 크기에 따라 웹 페이지의 각 요소들이 반응해서 동작하게 됨. 
이번 시간에 반응형 디자인을 순수한 웹 기술인 CSS 를 통해 구현하는 핵심적인 개념인 
미디어 쿼리에 대해 살펴봄. 

먼저, 새로운 파일 만들기. 
mediaquery.html 

화면 크기에 따라 어떤 HTML의 요소를 보이거나 안 보이게 만듦. 
아무런 의미도 없는 <div> 태그 하나에 "Responsive" 란 내용을 넣음. 
그리고 <div> 태그에 
border: 10px solid green;을 지정. 
폰트크기 60px 지정. 

화면 크기에 따라 <div> 태그를 화면에 보이기도 하고 안보이게도 한다면 화면 크기에 
따라 디자인을 다르게 했다는 것입니다. 이 때, 사용하는 것이 미디어 쿼리입니다. 
미디어 쿼리는 어렵기 때문에 단계적으로 살펴보겠습니다.

먼저 화면 크기가 800px 보다 크냐 작냐에 따라 <div> 태그를 보이거나 안 보이게 
만들고 싶다면 현재 화면의 크기를 알아야 합니다. 
크롬 개발자 도구를 통해 화면의 크기를 알수 있음. 
크롬 개발자 도구를 연 다음 화면의 크기를 변경해보면 오른쪽 위에 화면 크기를 확인 가능. 

기본적인 미디어 쿼리의 개념 보기. 
화면의 너비가  800px 보다 크다면 <div> 태그에 display:none 을 설정. 

미디어 쿼리의 개념 (가짜코드)
<style>
  screen width > 800px 
    div {
      display : none;
    }
</style>

실제 코드 
먼저, @media라고 씀. 
화면의 크기가 800px 보다 크다는 것은 화면크기의 최솟값이 800px 이라는 것. 
따라서, @media(min-width:800px)과 screen width > 800 px 은 같은 뜻. 

<style>
  div {
    border: 10px solid green;
    font-size: 60px;
  }
  @media(min-width: 800px){
    div {
      display: none;
    }
  }
</style>

결과 화면 
크기가 800보다 클 경우 <div>의 display 가 none이 됨. 
클 경우 <div> 내용이 사라짐. 

min 대신에 max를 넣으면 screen width < 800px 이라는 의미 
800px 보다 작으면 <div>가 사라지는 모습을 볼수 있음.
미디어 쿼리를 활용하면 화면 크기에 따라, 스마트폰의 가로 모드 / 세로모드에 따라, 
또 여러가지 화면의 특성에 따라 특정 조건을 만족할 때만 미디어 쿼리의 코드를 동작시키는 것이 가능.
이를 미디어 쿼리라 부름. 
우리는 최소한으로 배워서 최대한 써먹기. 

-----------------------------------------------------
제목
13 미디어 쿼리 써먹기

미디어 쿼리라는 혁신적인 기능을 살펴봄. 
배운 것을 예제에 도입.
2.html 열기. 

하려는 것
-> 화면의 크기가 줄어들면 선도 없어지고 본문이 아래쪽에 배치되며
'WEB'이란 타이틀도 작아지게 하는 것.

먼저 화면 크기 지정. 
800px 기준으로 화면크기가 800px 보다 클 때, 800px 보다 작을 때의 
디자인을 미디어 쿼리를 통해 다르게 만들어 보겠습니다. 
기존 디자인 그대로 두고 -> 미디어 쿼리 추가. 

screen width < 800px 에 해당하는 조건을 추가. 
이 코드는 : @media(max-width:800px) 에 해당, 

다음, 'grid' 부분을 'grid' 가 아니게끔 만들기. 
#grid 코드를 복사해서 미디어 쿼리 코드 안에 넣기. 
그리고 
display:grid -> display:black 변경. 

너비가 800px 보다 작을 때 grid 영역의 display 속성을 block 으로 변경. 

@media(max-width :800px){
                #grid {
                    display: block;
                }
}

다음으로 선 없애기. 선 왜 존재? 
<ol> 태그의 border-right 속성 때문. 

너비가 800px 보다 작을 때 목록 오른쪽에 있는 선 지우기 
 #grid ol {
                    border-right: none;
                }

결과 화면 창 800px 보다 작게 해서 확인 해보기.

다음으로 <h1> 의 태그 테두리도 지워보자. 
<h1> 태그의 테두리는 border-bottom 때문에 만들어짐 
미디어 쿼리 안에 해당 내용을 넣고 border-bottom:none; 지정. 

너비가 800px 보다 작을 때 제목 아래에 있는 선 지우기 

@media(max-width :800px){
                #grid {
                    display: block;
                }
                #grid ol {
                    border-right: none;
                }
                h1 {
                    border-bottom: none;
                }

            }

물론, 미디어 쿼리를 이용하면 이보다 훨씬 더 복잡하게 다양한 효과를 줄 수 있겠지만, 
우리 수업 범위를 벗어나기 때문에 여기서는 더는 자세히 다루지 않음. 
이 수업에서 미디어 쿼리가 무엇인가와 다양한 화면에서 웹이 어떻게 
적응해 왔는가를 배우기. 
좀 더 복잡한 상황에 부딪히더라도 미디어 쿼리를 공부해서 해결하면 됨. 

이번 수업에서는 현대 웹에서 필수적인 요소라 할 수 있는, 다양한 크기에 반응해서 
자신의 모양을 스스로 바뀌게 할 수 있는 반응형 웹을 알아봄. 

------------------------------------------------------------------------ 
제목 
14 css 코드의 재사용 
이 수업에서는 지금까지 만든 것을 다른 페이지에도 적용. 
먼저, 2.html <style> 태그를 복사해서 1.html 에 넣고 웹 브라우저에서 열어보기.
그런데 두페이지의 css 코드가 같음에도 서로 다르게 표시됨. 

2.html 의 <style> 태그를 1.html에 복사해서 붙여넣기.

<style>
            body {
                margin: 0;
            }

            a {
                color: black;
                text-decoration: none;
            }

            h1 {
                font-size: 45px;
                text-align: center;
                border-bottom: 1px solid gray;
                margin: 0;
                padding: 20px;
            }

            #grid ol {
                border-right: 1px solid gray;
                width: 100px;
                margin: 0;
                padding: 20px;
            }

            #grid {
                display: grid;
                grid-template-columns: 150px 1fr;
            }
            
            #article {
                padding-left: 25px;
            }

            @media(max-width :800px){
                #grid {
                    display: block;
                }
                #grid ol {
                    border-right: none;
                }
                h1 {
                    border-bottom: none;
                }

            }
        </style>

2.html에는 id가 'grid'로 설정된 <div> 태그가 있음. 
그리고 id 값이 'article'인 , 본문을 감싸는 <div> 태그가 있음. 
따라서, 2.html 에 설정된 두 태그를 1.html 에도 동일하게 적용한 후 
페이지를 새로고침하면 두 페이지가 동일하게 표시되는 모습을 확인 할수 있음. 

1.html 에도 <div> 태그를 추가하고 id 속성 추가. 

일부분 코드 
    <div id="grid">
            <ol>
                <li>
                    <a href="1.html">HTML</a>
                </li>
                <li>
                    <a href="2.html">CSS</a>
                </li>
                <li>
                    <a href="3.html">JavaScript</a>
                </li>
            </ol>

            <div id="article">
                <h2>HTML이란 무엇인가?</h2>
                <p>
                    <a
                        href="https://www.w3.org/TR/2011/WD-html5-20110405/"
                        title="HTML5 specification">Hypertext Markup Language(HTML)</a>
                    is the standard markup language for
                    <strong>creating
                        <u>web</u>
                        pages</strong>
                    and web applications. Web browsers receive HTML documents from a web server or
                    from local storage and render the documents into multimedia web pages. HTML
                    describes the structure of a web page semantically and originally included cues
                    for the appearance of the document.</p>
            </div>
        </div>

같은 방식으로 3.html 과 idex.html 적용 해보기. 
작업을 끝내면 모든 페이지가 일관되게 디자인 되는 것을 확인. 

극단적인 상황을 상상해 달라고 요청. 
이 코드를 여러 개의 페이지에 적용할 때 조금 까다롭지 않았나요?
만약, 웹 페이지의 수가 4개가 아니라 1억 개라면 어떻게 될까요? 
이 웹 페이지의 링크에 밑줄을 쳐야 한다면 1억 번을 작업 해야 합니다. 

문제 발생한 이유?
우리가 작성한 CSS 코드가 모든 파일에 중복해서 등장하기 때문. 
코딩을 잘하는 법, 즉 중복의 제거가 필요함.
중복의 제거가 굉장히 중요하고, 중복의 제거라는 것이 새로운 기술이 출현하는 데 큰 역할을 
하겠구나 라는 데 공감 필요. 

먼저 모든 웹 페이지에 중복돼 있는 CSS 코드에서 <style> 태그를 제외한 순수한 
CSS 코드만 복사해서 style.css 라는 파일에 붙여 넣기. 
그리고 <style> 태그의 내용을 다 지우고 웹 브라우저에게 이렇게 이야기 하기. 

style.css 파일을 생성하고 <style> 태그의 내용 붙여넣기 

 body {
                margin: 0;
            }

            a {
                color: black;
                text-decoration: none;
            }

            h1 {
                font-size: 45px;
                text-align: center;
                border-bottom: 1px solid gray;
                margin: 0;
                padding: 20px;
            }

            #grid ol {
                border-right: 1px solid gray;
                width: 100px;
                margin: 0;
                padding: 20px;
            }

            #grid {
                display: grid;
                grid-template-columns: 150px 1fr;
            }

            #article {
                padding-left: 25px;
            }

            @media(max-width :800px) {
                #grid {
                    display: block;
                }
                #grid ol {
                    border-right: none;
                }
                h1 {
                    border-bottom: none;
                }

            }

웹 브라우저야, 마우스 커서에 있는 위치에는 style.css 라는 별도의 파일에 
저장된 css 를 내려받아서 원래 그 코드가 있었던 것처럼 동작해. 
이런 역할을 하는 것이 바로 <link>라는 태그입니다. 
<link> 태그를 통해 이 웹 페이지가 어떤 CSS 파일과 연결돼 있는지 
웹 브라우저에게 알려줄 수 있다는 것입니다. 

<style> 태그를 지우고 <link> 태그로 css 파일 연결 

<link rel="stylesheet" href="style.css" />

1.html 이라는 웹 페이지는 style.css 라는 파일과 연결돼 있고, 
웹 브라우저는 style.css 파일을 내려받아서 이 웹 페이지에 적용.
1.html 을 새로 고침 하면 동일함. 

이제 style.css 파일에 대한 링크를 각 웹 페이지에 붙여넣기. 
내부적으로 완전히 구현이 달라지며 훨씬 더 효율적인 상태가 됨. 

만약, 누군가 여러분에게 웹 페이지에 있는 모든 링크 밑에 있는 밑줄을 치라고 했을 때 
style.css 라는 공통 파일에 가서 코드를 바꾸는 것만으로 모든 웹 페이지에 효과가 
적용되는 폭발적인 효과를 얻게됨. 
이런 효과는 처음 css 배우기 시작할 때, 선택자라는 것을 통해 우리가 얻을 수 있는 
중복 제거의 효과와 같음. 

style.css 를 참조하는 코드가 있다면 여러분은 이곳에 style.css 파일에 담긴 
코드가 있다고 확신함. 
<link rel="stylesheet" href="style.css" />
참고. 
rel -> relation : 연결 관계 의미. 

하지만, 1.html , 2.html, 3.html 에 <link> 대신
style.css 에 들어 있는 코드가 직접 기술돼 있다면 각 파일별로 존재하는 
CSS 코드가 실제로 같은지 파악하는게 어려움. 
그 웹 페이지에 <link>라는 한 줄을 추가하면 style.css 파일의 내용이 무엇인지 몰라도 
style.css 에 담긴 시각적인 기능성을 사용할 수 있게 됩니다. 
즉, 재사용이 높아지고 사용하는 입장에서 내부적인 코딩의 원리를 몰라도 사용할 수 있게 되니 
사용성이 높아집니다. 
그리고 우리가 가지고 있는 웹 페이지가 1억 개라도, style.css 파일 하나만 바꾸면 
1억 개든, 10억 개든 , 1000억 개든 변경사항이 동시에 반영되는 폭발적인 효과를 얻게 됨. 
코드의 양이 줄었기 때문에 이 웹 페이지를 내려받을 때, 인터넷 트래픽을 덜 쓸수 있다는 것도 
중요한 경제적 효과. (물론 style.css 파이을 HTML 파일과 분리해 뒀다고 해서 style.css 파일을 
다운로드하지 않는 것은 아닙니다.)
확인. 
크롬 개발자 도구를 열고 Network 탭으로 가면 현재 보고 있는 1.html을 새로고침 했을 때, 
내부적으로 어떤 파일을 웹 서버에서 다운로드하는지 확인 가능.

과정 
1.html 을 찾았고, 웹 브라우저가 HTML 코드를 해석하다 <link> 태그를 만나고 
style.css 파일을 다운로드해야 한다는 사실을 안 다음에 여러분 몰래 style.css 파일을 
다운로드해서 웹 페이지에 적용함. 
하나의 웹 페이지를 구성하는 여러 개의 파일을 별도로 분리해 두고 내려받는 것과 
그냥 웹 페이지 안에 CSS 코드를 내장하는 것 중에서 어떤 것이 더 네트워크적인 측면에서 
효율적일까요? 웹 페이지 안에 CSS 를 직접 작성하는 것이 그 자체로는 더 효율적입니다. 
하지만, 지금부터 설명드릴 기법 때문에 반드시 그렇치만은 않습니다. 
바로 캐싱(cache)

캐싱이라는 것은 저장한다는 뜻인데, 우리가 한번 style.css 파일을 다운로드했다면 
이 style.css의 내용이 바뀌기 전까지는 style.css 파일을 웹 브라우저가 우리의 
컴퓨터에 저장해 뒀다가 다음에 style.css 파일을 요청하면 저장된 결과를 가져와 속도를 
높일 수 있고, 사업자들은 돈을 덜 쓸수 있는 굉장히 중요한 효과.
이 캐시를 통해 style.css 파일을 캐싱할 수 있게 되면 결국에는 훨씬 더 빠르게 웹 페이지를 
보여줄 수 있으면서 네트워크 트래픽을 훨씬 더 적게 쓸수 있다는 굉장히 신기하면서 중요한 효과를 
얻을수 있어서 가급적 CSS 파일을 별도로 만들어 종복을 제거하는 것을 추천. 

우리의 웹 페이지를 어떻게 효율적으로 만들 수 있는지 알아봤습니다. 
<link> 라는 태그도 중요하지만 정보기술에서 중복을 제거해서 재사용성을 높이고 
가독성을 높이며, 유지보수를 편리하게 하는 것들이 얼마나 중요한 것인지 공감 필요함. 

------------------------------------------------------------------------ 
제목 
15 수업을 마치며 
선택와 속성.
속성을 많이 알수록 표현력이 풍부, 선택자를 많이 알수록 여러분이 알고 있는 
속성들을 좀 더 정확하게 표현할 수 있게 됩니다. 
선택자와 속성의 관계는 CSS를 지탱하는 두 개의 뿌리라는 것을 기억. 

예제를 이용해 자기 자신에게도 의미 있는 웹 사이트를 한번 꾸며보면 어떨까요?
부족한 부분을 채우기 위해 검색하고 질문하고 고민하다 보면 서로 각자 
무관한듯 떨어져 있던 개념들이 연결되기 시작하고, 그 연결이 충분히 촘촘해진다면 외부로부터 
우리에게 전해지는 배움이 없는데도 내부로부터 스스로 깨달아서 알게 되는 배움이 시작되지 않을까라는 
생각이 듬. 















































